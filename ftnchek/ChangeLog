2005-02-06  Robert K. Moniot  <moniot@localhost.localdomain>

	* Fixed what was arguably a bug, or at least a lack of
	consistency, in checking of comparison expressions (relops)
	vis-a-vis arithmetic expressions.  Michael Hiegemann reported the
	missing warnings.  The code in binexpr_type() in exprtype.c
	skipped the checking of type and size matching for operands of
	relops.  The original reason for skipping this checking seems to
	have been simply because the warnings for mismatches are embedded
	in the code that propagates sizes through expressions, and the
	results of relops are always default-size logical, so propagation
	of sizes is not needed.  I changed the code so that relop
	expressions are also checked, and the result size is set back to
	default at the end.  The rules for issuing these warnings are now
	the same as for in arithmetic expressions.  I was worried at first
	that this new behavior will generate a lot of pedantic warnings
	over things like IF(D .EQ. 0.0) where D is double precision.  But
	these warnings are controlled by -port, which is off by default.

	* Allowed -nocheck to suppress some syntax errors reported by
	exprtype.c.  These are issued for things that are really invalid
	(e.g. non-computational data types in expr or result of operation
	is E for error), so suppressing them is seldom advisable.  The
	only scenario I can see for suppressing them is when running
	ftnchek to produce a call graph or suchlike, on a program
	containing f90 code or other extensions that confuse ftnchek about
	validity of these operands.  I don't foresee a situation where the
	user would want to suppress these warnings and not others, so it
	doesn't seem that a new commandline switch is warranted.

	It should be noted that binexpr_type is used to check intrinsic
	arguments, but check_intrins_args() of symtab.c is not called if
	-nocheck is given, so the warnings about intrinsic function
	argument errors are suppressed without need for control by the
	misc_warn flag in exprtype.c.

	* Fixed bug reported by Nelson Beebe: for a statement of
	the form  DOUBLE PRECISION :: X  the lexer identified the initial
	DO as a keyword.  This turned out to be an overeager test in the
	looking_at_keywd routine, which concluded that a putative keyword
	is one as soon as it looks ahead to the first punctuation and
	finds a double colon.  This needs to fail if the putative keyword
	is DO (which can never be followed by a double colon even after
	intervening stuff) so that the lexer can re-try the test when
	DOUBLEPRECISION is seen.

2005-01-02  Robert K. Moniot  <moniot@localhost.localdomain>

	* Updated config.guess, config.sub and install-sh, using the
	versions found in /usr/share/automake-1.9/ (from Fedora Core 3
	automake-1.9.2-3.noarch.rpm.)  Removed these from the cvs
	repository, where they were temporarily included as a
	convenience.  They are required by the configure script but are
	not maintained here, so they do not belong in cvs.  Maybe the
	pretar target should check to see whether they are getting old,
	but this would probably be more trouble than it is worth.

2004-12-31  Robert K. Moniot  <moniot@galileo>

	* Fixed a bug in ftnpp handling.  (This went unnoticed till now
	since I had not kept ftnpp installed on galileo, so the regression
	test was always skipped.)  It seems that GNU cpp now adds the
	following series of #line directives at the start of its output
	when run from ftnpp-1.1:
	  # 1 "<stdin>"
	  # 1 "<built-in>"
	  # 1 "<command line>"
	  # 1 "<stdin>"

	These confuse ftnchek into thinking that it is in file "<stdin>"
	when it sees the true top-file #line directive inserted by ftnpp
	following these.  The get_cpp_directive() routine in forlex.c
	already ignores #line "" and #line "stdin" so I just added another
	test to ignore also filenames starting with '<'.  Hopefully real
	filenames of that form will be rare.

2004-11-17  Robert K. Moniot  <moniot@galileo>

	* Fixed a lack of F90 conformance: in Fortran 77 (8.4.2), all
	character variables must be of positive length.  In Fortran 90
	(5.1.1.5), they can be zero length, and declarations that specify
	negative lengths are permitted, turning into zero for the declared
	length.  The productions in fortran.y for character length specs
	were changed to issue warnings, controlled by a new flag
	-f77=character and a new variable f77_char_extension, that is
	intended to cover all extensions to F77 character types if any
	more should one day be supported.  Previously, char variable
	lengths <= 0 were replaced by 1.  Now they are replaced by 0 to
	accord with F90.  Note: because it seems likely that negative
	length specifiers may indicate a programming error, the warning
	about them is given even if this option is turned off, and is
	suppressed only by the -nocheck flag.

2004-11-09  Robert K. Moniot  <moniot@galileo>

	* Discovered that ftnchek.hlp has been broken for a while: in the
	documentation of most arguments that take warnlists, the entry
	describing each option (e.g. under /f77 the description of
	backslash option) lacks the option name (e.g. the word backslash
	is missing but the explanation of what it does is there).  This
	was traced to the use of .BR option : form of the entries for
	these.  Changing to \fBoption\fP: restored the correct form of
	entries.  This appears to be a bug in nroff.

2004-11-04  Robert K. Moniot  <moniot@galileo>

	* Added acceptance of OPEN option ACCESS='APPEND' to iokeywds.c.
	This feature was requested by Roy Goodman of NJIT.  This usage is
	nonstandard in both F77 and F90.  The g77 compiler, among others,
	accepts it and it has the effect of positioning the first write at
	the end instead of overwriting the beginning of the file.  In the
	F90 standard, the OPEN statement accepts a new keyword POSITION
	which can be set to 'APPEND'.  So the modern way to do this is
	OPEN( ..., ACCESS='SEQUENTIAL', POSITION='APPEND').  The warning
	about this extension is controlled by -f77=io-keywords and
	-f90=io-keywords.  For the latter, a suggestion to migrate to the
	standard usage is added to the warning.
	
	* Renamed -f77 and -f90 pointer option to cray-pointer, and
	changed meaning of -f77=pointer to control warnings about all
	f90-pointer-associated syntax.  (See 2003-07-11.)  Added said
	warnings to fortran.y.

	* Discovered some changes in GNU bison since last release of
	ftnchek.  (These changes became manifest when I generated a new
	parser from fortran.y while making the above change.)  One is that
	y.tab.h i.e. tokdefs.h has changed.  It now includes licensing
	comments, and the tokens start at 258 instead of 257.

	More significantly, the parser has gone back to the old yacc
	behavior of reporting "syntax error" instead of "parse error".
	This means that the little frill in message.c explaining the
	meaning of "parse error" to novices is not necessary.  Since I
	think that "syntax error" is meaningful to most novices already, I
	have not changed the explanation to match, but instead I have kept
	the code as is, in case bison reverts to "parse error" again in
	future.  This is a minor efficiency issue since the strncmp only
	happens at most once per run.

	This change in behavior means that users who rebuild fortran.c
	from fortran.y using an older version of bison that still says
	"parse error" will see regression test errors due to the different
	terminology.  Maybe I should fix the make rule for building
	fortran.c so that it changes "syntax error" back to "parse error".
	The latter verbage is actually helpful since it clearly
	distinguishes syntax errors that ftnchek catches and handles from
	those it doesn't.  OTOH this issue could be dealt with by adding a
	new Okay directory for the variant wording (which is also yacc's)
	and fixing the check rules to select the right directory based
	on the parser behavior.

2003-11-16  Robert K. Moniot  <moniot@galileo>

	* Finalized the new mode of doing checks under DOS/Windows.  This
	mainly required modification of compare.bat so that it looks in
	Okay.dos first for a master file, and compares the current file
	with that, otherwise using the regular one in Okay.  With this
	change, there is no longer a need for the DOS/Windows user to do
	anything in the test directory prior to running check.bat.  I also
	modified check.bat so that it won't issue unimportant warnings
	when starting up.  Before running the checks, it needs to create
	the Vary directory if it does not already exist, and to remove any
	files that may be in it.  In the previous version of check.bat,
	these actions generated warnings if Vary already existed and/or if
	it was empty.  I simply prefixed the commands with tests for the
	existence of the items, so the actions are skipped if unneeded.

	The INSTALL file has been updated to reflect these changes and
	also the fact that -mkhtml is now available in the DOS version
	(due to the removal of dependence on regex.h).  Some changes may
	still be needed in ftnchek.man.

2003-10-15  Robert K. Moniot  <moniot@galileo>

	* Extended the readahead of the looking_at routines: they now are
	able to read to the end of statement regardless how many
	continuation lines are needed.  This is now possible due to the
	new source buffer scheme.  This finally removes the limitation
	that keyword vs identifier ambiguities like DO no longer need to
	be resolved in the same line as the keyword.

	* Added a minor frill to advance.c: flush_end_stmt() is a special
	version of flush_line_out() for END stmts.  In the previous
	release, if the last line of file was blank or comment, it was not
	printed.  Also, a blank line following an END statement and prior
	to other comment or statement lines was printed with the END
	rather than with the following lines.  (This behavior was
	apparently not a deliberate design choice but an effect of the way
	lines were printed in the double-buffer input scheme.)  In the new
	scheme, all lines are printed if -list is in effect, and all blank
	and comment lines between subprograms are grouped together with
	the next subprogram start rather than at the end of the previous
	subprogram.  The result is that one or more trailing blank/comment
	lines at end of file get listed by themselves after all output
	pertaining to the last subprogram, and before the global warnings.
	This looks especially odd if the lines are all blank, since all
	one sees are the line numbers.  The flush_end_stmt() routine is
	used only for END statements, and looks ahead to see if there are
	only comment lines between there and the end of the source buffer.
	If so, then it bumps up the line number to the last line so that
	all of these comments get printed together with the END statement.
	Otherwise, it just flushes only the END statement as normally.
	(This change has had an effect on a surprisingly large number of
	regression files: it turns out that about 10 of the source files
	have a blank line as the last line of the file.)  This change
	happened to fix a small bug that had been reported some months
	ago: in -list mode if the last line of a file was blank except for
	a sequence number, the blank line was printed, but not if the line
	was completely blank.

	I also looked into a regression discrepancy in embedded-space.f:
	the new version does not report embedded space within the **
	operator that is split across a continuation (lines 4 and 5).
	This is arguably more correct than formerly, since the first * is
	in column 72 and the second is in column 7 of the next line, so
	the space between them is properly elided.  (The warning reappears
	if -col=73 is used so that there is an actual space between them.)
	The old version only elided the space across a continued statement
	when inside strings.  It's a nice question whether the -pretty
	warning ought to be given for this particular case or not:
	arguably it is ugly and possibly misleading to split a token other
	than a string across a continuation whether or not the space is
	supposed to be elided.  I am leaving the new code as is for now,
	but perhaps the elision logic should be altered to work only inside
	strings.

	I have now checked in the regression test files that have changed,
	so the new version again passes "make check".

2003-10-14  Robert K. Moniot  <moniot@galileo>

	* Committed changes made up to now in advance.c and related.
	These include some changes to test/Okay files, mainly reflecting
	the fact that printing of a line can now be delayed till
	processing has passed well beyond the line itself.  There are
	still some problems to fix, and the files in test/Vary that show
	these problems haven't been moved to Okay.  A minor issue is
	whether to print trailing blank lines at the end of a source file.
	The old version suppressed these but the new one prints them just
	before wrapup, which means that the line numbers can appear to be
	dangling.  This could be fixed by trimming the source buffer to
	eliminate trailing blank lines before processing starts.  Another
	problem is a bug that appears in the embedded-space.f check, where
	it misses an instance of embedded space.  I haven't traced this
	bug down.  The upshot is that "make check" on a build using the
	newly committed files WILL TURN UP DIFFERENCES.

2003-10-07  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Found and fixed a fairly long-standing bug in set_option() of
	options.c: an off-by one error in searching for the '=' sign of a
	numeric setting caused search to fail if option name given with
	just the minimum 3 characters.

2003-09-28  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Rewrote the guts of advance() in advance.c to make full use of
	the new source buffer scheme.  It no longer has any code using the
	old two-line design.  The new design also makes use of the idea
	described in 2003-08-26, namely keeping start and end indices to
	each noncomment line.  The result is much cleaner than the old
	advance() but still with some tricky bits due to the need to
	handle unusual situations such as blank continuation lines.  It is
	basically working, but there are still some problems.  Some
	warnings about nonstandard comments and the use of tabs have been
	removed and are not yet reinstated.  And the extra lookahead is
	not yet made use of by looking_at routines.

	Also updated include.c to do the right things.  Most of the
	regression diffs are now due to the missing nonstandard warnings.

2003-09-07  Robert K. Moniot  <moniot@galileo>

	* Fixed a bug in the grammar that caused a peculiar behavior: if a
	GOTO referred to an END statement, it would generate a warning
	"Goto refers to a non-executable stmt" if the statement prior to
	the END was a FORMAT.  The reason was that labeled_stmt_type never
	gets set for an END statement, and it retained the type of the
	previous statement.  This was then passed to def_label.  The fix
	is simply to pass def_label the LAB_EXECUTABLE statement type when
	defining the label of an END statement.  This bug has been in
	there ever since labels were implemented.

2003-08-26  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Continuing work on find_contins: decided to explore the
	feasibility of keeping indices of start and end of interesting
	text on each noncomment line.  This would very much simplify the
	subsequent feeding of source to lexer.  The start index is the
	first nonspace or, for continued lines, the first nonspace after
	the continuation mark (fixed source) or the '&' if any (free
	source).  Here nonspace means non-significant space, i.e. space
	that is not in a string or hollerith.  The end index is trickier
	to find, since it requires some lexing to avoid being fooled by
	'!' or (for free source) '&' inside a string or hollerith.  But
	this lexing will have to be done at least for free source if we
	simply want to mark continuations at this stage, so it may as well
	be done for fixed source too and gain the benefit of the end
	index.  Watching out for strings is no problem, since a quote or
	apostrophe is an unambiguous lead-in.  Holleriths are a lot of
	trouble, however, since they start out looking like numbers, and
	things that look like them can also be embedded in identifiers:

	   y = x2h ! comment

	If the '2h !' is taken as a hollerith, then the actual comment
	won't be seen and end index will be set to the end of the line,
	exposing the comment to the lexer.  These false positives can be
	avoided by requiring the last nonspace (call it prev) before the
	number part of the hollerith to be a punctuation mark.  In fact,
	to conform to the F77 standard prev has to be one of ':' '(' '/'
	'*' or ',' corresponding respectively to a FORMAT H edit
	descriptor, a subprogram argument or FORMAT edit descriptor, a
	value in a DATA statement, a repeated value in a DATA statement,
	and any of the foregoing.  The F77 standard (C3) recommends
	allowing hollerith constants only in CALL and DATA statements, but
	ftnchek allows them anywhere a literal constant can go.  This
	means that to be consistent with the lexer we need to allow prev
	to be any arithmetic, relational or logical operator or
	assignment, i.e. also '+' '-' '.' '>' '<' or '='.  So there
	doesn't seem to be much reason not to simply use ispunct(prev) as
	the criterion.

	This rosy picture is subdued a bit by the fact that the lexer and
	parser do not require a separator between edit descriptors in
	FORMAT lists.  (The g77 compiler does.)  The standard (13.2)
	requires a comma except between P and an immediately following F E
	D or G edit unless there is a slash or colon instead.  So we
	either have to tighten up ftnchek's rules for FORMATs to require
	punctuation between edit descriptors, or relax the requirement in
	our new code so that holleriths need not be preceded by
	punctuation when we are scanning a FORMAT statement.
	Unfortunately, given that FORMAT is a legal name for an array or
	statement function, determining whether we have a FORMAT keyword
	at the start of the statement is not trivial.

	So FORMAT lexing & parsing will have to be tightened to require
	punctuation at least in front of H edit descriptors, so that it
	will be consistent with the scanning done here.  Since things like
	(I3 3Hhi!) are ambiguous anyway, this is probably not a bad
	requirement.  Then an adequate test for whether we can be seeing
	the start of a hollerith is that the preceding nonspace character
	is a punctuation character.  For free format, even spaces are
	significant so the test can be that the preceding character is not
	alphabetic.

2003-08-08  Robert K. Moniot  <moniot@galileo>

	* Wrote new routine find_contins() called by gulp_srcfile() to
	scan thru source buffer and mark all continuation lines.  It works
	for both free and fixed source form.  The first line of a
	continued statement is NOT marked, but each continued line is.
	Comment lines that may intervene in a continuation series are NOT
	marked as continuations.  (The illegal case of an & alone on a
	line except for commentary is treated as a comment, which is
	skipped by this routine.)  With this in place, it should now be
	possible for looking_at routines to read ahead as far as necessary
	to disambiguate a statement.

2003-08-07  Robert K. Moniot  <moniot@galileo>

	* Simplified the way that get_comments() of makehtml.c finds the
	current module definition: got rid of current_module_lineno, and
	def_curr_module() of symtab.c now simply saves a pointer to the
	source buffer location itself.  The routine that actually does
	that is in advance.c so that symtab.c doesn't need to include
	advance.h.  There is one sticky business: usually by the time
	def_curr_module() is called, lexing has advanced beyond the line
	containing the definition, so it is necessary to back up a bit to
	find it.  This backing up will not work right if the source file
	has # line directives that cause the line numbers to be
	non-monotonic.  This problem should not matter unless the # line
	is close to the line where the subprogram begins.  It is not worth
	fixing.

	* The "potential problem" mentioned 2003-08-05 was actually a bug
	in pop_include_file(), which did not correctly restore
	curr_srcLine.  The fix is to save curr_srcLine instead of
	next_srcLine in include stack, and restore the latter from next
	pointer of the former.  The former is never NULL when push_include()
	is called, even on a file consisting only of an INCLUDE stmt;
	whereas the latter can be NULL if the INCLUDE stmt is last or 2nd
	from last in the file.

	Don't forget to revise IncludeFileStack some day to get rid of
	anything stored in curr_ or next_srcLine.

2003-08-05  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Began converting the looking_at routines so that they can make
	use of the new unlimited lookahead.  What I did today is to change
	the various see_x and skip_x routines so that instead of taking a
	line array and an index as arguments, they receive a srcPosn
	struct which has a pointer to a srcBuf struct and an index into
	the line component thereof.  Thus these routines will be able to
	use the next pointer to move ahead in the source buffer as much as
	needed.  For the present, I simply rewrote them to have the same
	behavior as previously.  They now pass "make check".  One
	potential problem: after an include file has been closed,
	curr_srcLine is NULL so these routines cannot pick up from there.
	I guess the solution will be to recover it in that case from
	next_srcLine->prev.

2003-08-01  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed get_comments() of makehtml.c so that it no longer
	reopens the source file and greps through it, but instead it uses
	the source buffer and the known line number of the routine
	declaration.  This has the main advantage of eliminating the
	dependence on regex.h.  The only pattern matching that it still
	needs to do is recognition and elimination of POWERPLEX comments,
	and this is simple to do without needing grep.  Other benefits
	include being much faster on large files (e.g. 10x speedup on
	t208x.f), and also it is cleaner since it can rely on flags for
	comment and continuation lines set by the lexer, which does a more
	sophisticated job.  And it now grabs comments from undeclared main
	programs, which were formerly not recognized since they have no
	PROGRAM %MAIN statement.  Apart from the new mechanism I have
	tried to keep the treatment the same.  One thing that should be
	added is to make the decision of whether to keep blank comment
	lines a -mkhtml option.  Currently I have made it depend on a
	special macro that is normally not set.

	I had to introduce a new variable current_module_lineno to tell
	get_comments where to find the routine.  At first I used
	lSymt->line_declared, but this is incorrect for functions, which
	have it set to the line where the function's data type is
	declared.

	An idea that crossed my mind but was not implemented is to improve
	the smarts of get_comments() so it will do the right thing on
	source code in the style of hybrj.f: this code places declarations
	of all subprogram arguments immediately following the subprogram
	declaration, and then the descriptive comments following that.
	The idea would be that if no comment block is found around the
	subprogram declaration, skip down a bit.  A way to estimate how
	far it would be appropriate to skip would be to count the number
	of left parentheses and commas in the subprogram declaration (to
	obtain the number of arguments), and then skip the following
	statements until the same number of statements plus commas has
	been seen (only counting commas outside of any parentheses, so as
	not to include those in array dimensions).  Maybe skip one more
	just in case.  Use that as the starting point for finding the
	comment block.  Alternatively, we might keep a srcLine flag that
	marks declarations, and skip over all declarations to the next
	comment.

2003-07-28  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Spit is_comment(s) in advance.c into two routines:
	find_comments_and_contins(srcBuf) now loops thru the source buffer
	and performs the tests on each line formerly done by is_comment(s)
	during lexing.  It sets flag Line->comment if the line is a
	comment (including blank lines) and the flag Line->contin if it is
	a fixed-source continuation.  New is_comment(srcLine) takes a
	srcLine struct as argument and consults the iscomment flag.  One
	sticky aspect: there are three standards warnings issued by
	is_comment(): D comments (under both f77 and f90), inline comment
	(under f77), and lone free-source continuation mark (i.e. a line
	with only an & and possibly a comment besides space) (f90).  These
	warnings cannot be issued at the time the violations are detected
	since find_comments_and_contins() runs before lexing starts.  So I
	introduced additional flags in struct src_line that flag these
	conditions.  Further stickiness is that is_comment needs a column
	number to go with the latter two warnings (D comments are always
	column 1).  One solution would be to store the column number
	in struct src_line, but this would be a COLNO_t (currently
	typedef'd as unsigned) for every source line, for the sake of
	warnings that are almost never issued.  So instead is_comment()
	looks up the column number of the offending '!' or '&' when
	issuing the warnings.  These are always the first character
	following space, so the routine to find them, colno_of(), can
	simply act like (strchr(s,c)-s)+1 except for translating tabs.

	find_comments_and_contins() can quite easily recognize
	fixed-source continuations.   The code to do so is not quite right
	yet, since it only identifies continuations without statement
	numbers, so this flag is not used yet.

	Added code to free up the allocated srcBuf elements.  This may not
	be the best thing to do in the case of include files, since (a)
	they are likely to be re-read later on, so that saving them could
	avoid the need to re-open the source file, and (b) by keeping them
	around, their source code could be accessed for use in error
	messages even long after the include file has been closed.  These
	considerations do not apply to top-level files.

2003-07-27  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Created a new routine named gulp_srcfile() in advance.c.  This
	routine reads the entire source file into a buffer.  At the
	moment, no other changes were made, but in future this will allow
	the following improvements: looking_at_x routines will have
	unlimited lookahead to resolve ambiguities that span more than two
	lines; makehtml will not need to use regex stuff because lines can
	be tagged according to category during lexing phase; error
	messages will be able to list relevant source lines regardless of
	distance from error.  At present, the buffers are mallocked but
	never freed, so this represents a huge memory leak.

2003-07-18  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Fixed a problem in fortran.y with processing of the new f90
	attribute declarations (POINTER statement and kin).  These were
	using arith_type_decl_list for the list of declared items, but
	that generated a redeclaration error message.  I gave them a new
	list production of their own which processes them via a new
	routine apply_attr() in symtab.c, which sets the appropriate bit
	in the symbol table.  While I was at it, I introduced new bits for
	ALLOCATABLE, POINTER, and TARGET attributes which this new routine
	will set.  Since the processing of these attributes is the same as
	for SAVE, I removed the routine save_variable() and replaced it by
	equivalent calls to apply_attr().  There is of course the question
	of legality checking.  Currently only SAVE is checked, and this is
	done at END processing.  Checking that will need to be done
	includes: (1) POINTER & TARGET cannot be applied to parameters;
	(2) ALLOCATABLE and POINTER can only be dimensioned with a
	deferred shape; (3) ALLOCATABLE cannot be applied to a dummy
	argument or function result; (4) POINTER cannot have an INTENT
	attribute.

	Reminder: no semantic processing of these new attrs is done.

2003-07-11  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed the version string to 3.pre3 patch level 0.

	* Robert Landrito has added appropriate lexing and parsing to
	recognize f90 POINTER related syntax.  Specifically:
	  -- new tokens for keywords ALLOCATABLE, ALLOCATE, DEALLOCATE,
	     NULLIFY, and TARGET and additions to keywords table in
	     keywords.c to recognize them.
	  -- new token for pointer assignment operator => and addition to
	     forlex.c get_punctuation to lex it.
	  -- new intrinsic functions ALLOCATED and ASSOCIATED.
	  -- new productions in fortran.y for ALLOCATABLE, POINTER, and
	     TARGET attributes in type declarations, and the same in
	     stand-alone declarations.
	  -- new productions in fortran.y for ALLOCATE, DEALLOCATE, and
	     NULLIFY executable statements.
	  -- new dim_bound_item ':' to allow deferred-shape expressions.
	Remaining to be added are all semantic processing of these,
	including -f77 warnings.

	Added pointer_alloc.f90 to test suite in FREEFORM list.  This uses
	POINTER attribute; deferred-shape array declaration; ALLOCATE,
	DEALLOCATE, and NULLIFY statements; and ASSOCIATED intrinsic
	function.

	* Fixed a bug and an un-necessity in the new (open-hash) labels.c:
	the bug was introduced when ref_label code was changed to insert
	new how_used entries at the end instead of the front of the
	linked-list.  The new code didn't do this correctly and ended up
	with only the last usage accessible.  I restored Elsayed's
	original code and it is OK.  The un-necessity was the portion of
	sort_labtable that "squeezes out blank slots".  There are no blank
	slots in the new way of doing things, so this step can be omitted.

2003-04-17  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Got rid of Checkbat.zip and instead, placed the unpacked .bat
	files, as well as cmp.c and cmp.exe, into the test directory.
	Like configure_os2.cmd, the .bat files are maintained with the DOS
	convention line endings (CR+LF) and so they and cmp.exe must be
	stored in the zip file in binary mode (use zip sans the -l flag).
	It occurred to me that now maintainers could be working in the DOS
	world and perhaps want to make zip using source code that was
	unzipped with CR+LF line endings.  So I introduced a separate make
	macro ZIPTEXT which is $(ZIP) -l, to allow easy suppression of the
	flag.

	The validation test files that differ between UNIX and DOS are in
	a separate directory named Okay.dos.  Rather than maintain these
	by separately running ftnchek in a DOS environment, it is better
	for avoiding staleness to have them updated automatically by
	editing the UNIX versions.  The edits are pretty straightforward:
	changing '-' to '/' on all command-line option names in messages,
	and changing file paths in the include check.  I did not find a
	way to create a generic rule for these edits, and so each of the
	differing files needs its own rule.  At least, one can use a macro
	to define the list of edits for each group of files so the rules
	don't need to be changed if the edits change.

2003-04-14  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added keyvars.f to the test suite.  This file has a lot of
	variables with keywords as their names, and may serve as a useful
	check for breakage in the lexical analyzer.

2003-04-04  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added cray-pointers.f to the test suite.

2003-03-30  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Released current version as 3.2.2.

2003-03-25  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Responded to a bug report from Norm Crawford.  The bug showed
	itself as a failure of the call tree to be produced from a set of
	routines lacking a main program, in which the root of the call
	tree is a function that uses its own name as argument to a
	subroutine call.  The bug is that used_flag of the function should
	not be set in the global symbol table as a consequence of the name
	being used locally in the function itself.  Setting this flag
	suppresses the call tree since in absence of a main program,
	ftnchek prints call trees rooted in uncalled (unused) subprograms.

	The fix will become incorrect once ftnchek starts supporting
	recursive functions.  So I replaced the unused Gsymtab flag
	used_before_set by a flag named recursive.  This flag will always
	be 0 in the current ftnchek, but it is tested before transferring
	the used_flag from local to global symbol table.  The
	used_before_set flag is not saved in project files, so when
	recursion is supported, the recursive flag will have to be saved.
	There are 3 flags still available in the current project-file
	format.

	While investigating this bug, I noticed that all main programs get
	their used_flag set (locally).  The comment where that happens
	says it is done to suppress bogus "never invoked" warnings, but in
	fact those don't get issued anyway since the visited_flag is used
	for that purpose, and a main prog always gets its visited_flag set
	since the visiting process starts from the main prog if there is
	one.  So I removed the setting of used_flag.  Perhaps a warning
	should be issued if a main prog turns up with its used_flag set,
	indicating it is called.  But there is already a usage mismatch
	warning about calling a main prog.

2003-03-21  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Responded to a bug report from Richard Grubb, who is using
	ftnchek on a Mac.  The problem is that when a source file is in
	Mac format, with only <CR> and no <LF>, ftnchek reads it as one
	long line and complains about characters past 72 columns, among
	other things.  It turns out to be pretty simple to fix ftnchek to
	handle the three major line-ending conventions.  The only place
	that needs to be changed is getstrn.  The new code works thus: if
	it sees a <CR> it treats it as a newline, but also remembers that
	it saw it.  If it sees a <LF> when the previous char was <CR>, it
	ignores it, so that either <CR> (Mac convention) or <CR><LF>
	(MS-DOS convention) is treated as a single newline.  If it sees a
	<LF> when the previous char was not <CR> (Unix convention), it
	also treats it as a newline.  This will transparently work without
	needing a command-line switch or system-dependent compilation
	option.

	The one possible hitch is an isolated <CR> in either MS-DOS or
	Unix source code.  Here are my thoughts on that: Its meaning is
	carriage-return, which results in overwriting the previous part of
	the line.  This has sometimes been done in text, e.g. to achieve
	boldfacing on printouts.  It wouldn't make much sense in a
	statement.  Anyway, the Fortran standard would forbid using it
	except inside quotes or a comment.  Generally one avoids using
	control characters literally in strings, since they cause the
	source listing to look bad.  So I think we can focus on comments.
	Would anybody want a comment to be boldfaced, and use ^M to
	achieve that?  Certainly not in new source code destined to be
	laser printed or viewed on a screen.  But what if this is a dusty
	old deck?  If they are boldfacing the whole comment line, then the
	character after ^M would be a repetition of the C so the new line
	would be treated by ftnchek as a second comment, and the only odd
	thing to the user would be that subsequent line numbers would be
	off by one.  If they don't boldface the C, then we are in trouble
	since the rest of the comment would be taken as a statement.
	Unlikely, in my opinion, although with all those dusty decks out
	there you never know.

	* Compilation on MS-DOS system, using Borland CBuilder 5.0 and MS
	Visual C++ 6.0 turned up a few problems.  One was a naming error:
	the MSVCC version of strncasecmp is named strnicmp and we had
	strincmp.  Also, due to not including ftnchek.h, utils.c did not
	get the definition of USE_OUR_CASECMP so that it failed to compile
	the replacements when that is supposed to be defined.

	I also discovered that Checkbat.zip had gotten dropped out of the
	distribution.  This should be gotten rid of anyway: it will be
	better to put the *.bat files into the test directory (and into
	CVS), and handle the other details differently so that
	Checkbat.zip is not needed anymore.  I haven't done this yet, but
	it should be done before the next release after the upcoming one.

2003-03-17  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Fixed some problems that turned up when ftnchek was built on a
	VAX VMS system.  (Thanks to Eugene Giuliano Jr of CSC/BAE SYSTEMS
	for his help on this.)  Most serious was omission of newly added
	source files .  But the compiler also complained about unary +
	in "return +1" statements in prlocsym.c (where they are merely to
	provide counterpoint to some "return -1" statements).  It also
	doesn't like variable names that are over 31 characters long.  In
	both cases it warns but compiles OK, but it is simple to change
	the offending code.  In order to prevent build.com from being
	released out-of-date again, I added a new target checkvmsbuild
	within the pretar target, which makes sure everything in OBJS is
	compiled and linked by build.com and build-vax.com.

	Robert Landrito has unified the solution to the possible lack of
	str[n]casecmp on different systems.  There was already a
	replacement for strncasecmp, called cistrncmp, used by ftnchek.c
	and options.c.  With new functionality in iokeywds.c we needed to
	do the same workaround for strcasecmp.  The situation now is this:
	if str[n]casecmp exist, they are used.  If they don't exist, then
	if either str[n]cmpi or str[n]icmp exist they are used.  If none
	of these exist, then our own versions of str[n]casecmp, kindly
	provided by Nelson Beebe, are used.

	I noticed that #ifdef HAVE_STD was used instead of the correct #if
	HAVE_STDC in a few places.  Fixed.

	The make rule to create iokeywds_enum.h put in a trailing comma,
	which is not legal ANSI for enum defns.  I modified the rule so it
	now omits the last comma.

2003-02-19  Robert Moniot  <moniot@fordham.edu>

	* I fetched the FORTRAN78 test suite from NIST, available from
	http://www.itl.nist.gov/div897/ctg/fortran_form.htm, named
	fcvs21.tar.Z, (1423KB, 9/27/99).  Running ftnchek on it requires
	the -pretty=no-long-lines since many of the lines contain sequence
	numbers in columns 73-80.  Also, several of the files had to be
	edited to remove a duplicate PROGRAM statement at their head.
	Tests on this suite turned up two bugs.

	Bug 1: the token for imag_part in get_complex_const was not being
	initialized.  This caused the line_num and col_num fields to be
	bogus, which is noticed if the imaginary part is involved in a
	message, such as a precision warning.  While fixing this bug, I
	decided to also improve how HAVE_MEMSET and HAVE_BZERO are used.
	If either one exists, a macro zero_struct(struct *,size_t) is
	defined that uses the available function to clear the struct.
	Otherwise, zero_struct is a function that does the job with a
	for-loop.

	Bug 2: if a dummy argument is an external and has the same name as
	an intrinsic function, it was treated as an intrinsic.  The fix
	simply requires adding a test to exclude dummy arguments from
	being automatically taken as intrinsic.

2003-02-14  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Clive Page <cgp@star.le.ac.uk> reported a bug, which is actually
	two bugs.  The bug he reported occurs in code of the form DO WHILE
	(expr) ...  END DO.  The parser's production for the DO WHILE does
	not nullify curr_stmt_name, so if that retains a value from some
	prior named construct, the END DO will trigger a bogus error
	message about a missing construct name.  This is fixed by simply
	setting curr_stmt_name to NULL in the production.  While
	investigating this, I noticed that there is no production in the
	grammar for a DO WHILE with a construct name.  Simply adding such
	a production does not work, because if the DO WHILE has a
	construct name, the DO will be taken as a keyword but the WHILE
	will not, leading to a parse error.  The fix I have implemented
	sets WHILE_expected to TRUE if a DO following a construct name is
	found (barring a following = sign, which is checked by
	looking_at_keywd).  This causes the WHILE to be recognized in its
	turn.  This fix has the disadvantage that the DO and WHILE are
	lexed as two separate tokens, whereas in all other cases except
	where a label intervenes they are merged into tok_DOWHILE.  But it
	does allow the existing do_handle production to take care of this
	case.
	
2003-02-10  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Robert Landrito is now helping out.  He went thru makehtml.c and
	removed unused variables that were left over due to copying code
	from makedcls.c.  He has also migrated it to CVS on pascal.  When
	working at home, do the following:
	   CVSROOT=pascal:/usr/local/src/cvsroot
	   CVS_RSH=ssh
	   export CVSROOT CVS_RSH
	Then, if using publickey authorization, cvs checkout, diff, and
	commit proceed much the same as they would if it were local
	(subject to bandwidth limits, of course).

2003-02-04  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* A conversation with Nelson Beebe helped clarify a minor
	portability issue: forlex.c uses the toascii() function to convert
	input source characters to ASCII before doing certain tests such
	as making sure they are legal Fortran characters.  Beebe writes:
	  toascii() is not part of ISO C (either 1989 or 1999).  Harbison
	  & Steele (5th ed.) describe it as a stripper of the high-order
	  bit. Sun Solaris 2.8 defines it in ctype.h (as an extension, and
	  thus not visible to c89) as
	    #define	toascii(c)	((c) & 0177)
	VAX C with /STANDARD=ANSI89 also fails to define it.

	One reason it is not included in ISO/ANSI C is probably that some
	character sets define ligatures that would need to be converted to
	two ascii characters.  My use of toascii() was originally
	motivated not by 8-bit extensions to ascii such as iso-8859-1 but
	by ebcdic.  The test for character legality included some
	arithmetic inequalities that would not be guaranteed correct on
	ebcdic, which is a discontiguous code.  I took a close look at the
	islegal() macro in forlex.c and decided it can be rewritten
	without any inequalities other than to exclude control characters.
	There remains a reason for using toascii(), which is that it
	guarantees a value in the range 0 to 127, so that the result can
	safely index into the legal_chars array.  (Indexing of this array
	is actually offset so it starts with ' ', which is one reason why
	control characters must be excluded.)  The 8th-bit-stripping
	toascii() will work fine here because the test is of the form
	  legal_chars[toascii((int)(C))-toascii(' ')] == (C)
	which will fail to match any characters above 127.  I added a
	macro definition of toascii() if it is not already defined.
	Hopefully it would be defined on any ebcdic machines: if not, the
	user should provide a suitable definition at compile time.  I have
	never heard of anyone building ftnchek on an ebcdic machine so the
	question may be moot.

2003-1-10  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Released as version 3.2.1.

2003-01-05  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Built ftnchek using Borland CBuilder 5.0 and MS Visual C.  Found
	some problems: both of these compilers lack (1) regex.h (needed by
	makehtml.c) and (2) strcasecmp (needed by iokeywds.c).  Problem
	number 2 is easily fixed by substituting stricmp or strcmpi.  So I
	have added appropriate defines to config.h and used them to
	redefine strcasecmp if need be.  A config.h suitable for both
	compilers, named config-win32.h, is added to the distribution, and
	INSTALL instructions have been updated suitably.  New versions of
	makefile.bcc32, ftnchek.dsw, and ftnchek.dsp have been made.

	Problem number 1 is apparently irremediable.  Borland has an
	include file named pcreposix.h (name stands for POSIX wrapper to
	Perl-compatible regular expressions) that it says can be linked or
	copied to regex.h, but it lacks some macro definitions used by
	makehtml.c's grep.  MS VCC doesn't seem to even attempt to support
	regex.h.  So -mkhtml is disabled if these compilers are used.

	* Changed Makefile target install-exe so it first removes
	$(bindir)/ftnchek.  At some sites, that is a hard link to a
	version-specific program, e.g., $(bindir)/ftnchek-3.1.2.  The
	result was that the previous version is destroyed by the "make
	install".  (Suggestion from N.H.F. Beebe.)

	* Introduced HAVE_REGEX_H for those compilers that lack it, and
	disabled operation of make_html() if regex.h unavailable.
	Instead, the html file contains a short message describing the
	problem.

	* Fixed an incompatibility with C++ in makehtml.c: arguments to
	grep need to be const char *, not char *.

	* Noticed that autoconf (v2.53, installed 22 Nov 2002) behaves
	differently now: (1) No config.cache is created.  (2) The kluge in
	configure that was used to work around C++ incompatibilities
	causes failure to find the C compiler.  This kluge seems not to be
	needed any more, since the tests for sizeofs and memset/bzero are
	now C++ compatible (at least with g++).

	* Rearranged macro defns in Makefile, putting all configured
	program defines together in one section, regardless of whether
	they are standard system programs or not.

	* Added a test in Makefile target manpage, so if soelim does not
	exist, it does not try to make ftnchek.1 but instead tells the
	user to fetch the catman docs.  In .man.cat rule, removed
	HAS_NROFF macro, replacing it with equivalent tests for existence
	of tbl and nroff.

	* Added a check for program emacs to configure, and fixed up the
	Makefile target install-lisp so it automatically byte-compiles
	ftnchek.el after installation in lispdir.

2002-12-21  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Replaced ftnchek.el v.0.6 by v.0.9, supplied by Judah Milgram.

2002-12-15  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Replaced ftnchek.el v.0.6 by v.0.8, supplied by Judah Milgram.

	* Judah Milgram spotted a bug in the checking of argument
	agreement: with -portability turned on, a default double would
	match a default real.  This is because the non-port checking makes
	all reals the same and catches the mismatch via size checking, but
	under -port it was leaving the size as size_DEFAULT, so no
	mismatch seen.  The fix is to disable the merging of reals when
	translation of sizes is suppressed.  This fix also affects matching
	of complex to double complex.   Integer to hollerith was not
	affected by this bug since that has special checking code.  This
	bug has been there since the implementation of size checking.

2002-11-23  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Applied patch to makehtml.c from Nelson Beebe to work around a
	faulty <regex.h> on FreeBSD 4.4: it needs the definition of off_t
	provided in <sys/types.h>.

2002-11-20  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Released as version 3.2.0.

2002-11-17  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* More changes to makehtml.c: fixed bug in choosing free-form
	source input; fixed what seemed to be a bug in the handling of
	free-form continuation lines; fixed bug that prevented
	identification of routine declarations starting in column 1.

	Changes to test Makefile: it tests -mkhtml (default mode) with
	-call=tree on a newly added set of routines in different files, so
	that the CallTree.html file and a set of linked .html files is
	created.  The target also tests -mkhtml with all options on the
	same set of files as for testing -makedcls.  Added model.f90 to
	that list of files so that both -mkhtml and -makedcls are tested
	with a file that is in free source form.  This required some
	changes to these Makefile targets to handle .f90 file extension.
	It also turned up the bugs mentioned in previous paragraph.

2002-11-12  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Polished makehtml.c slightly: mainly, McVeigh used the -makedcls
	option variables to control appearance of the HTML.  This meant
	that in order to change these options in the HTML, -makedcls would
	need to be used, generating a declarations file that is probably
	not desired.  I made -mkhtml a strsetting with its own option
	variables, corresponding to the dcl ones except for three that are
	not applicable: asterisk-comment, comment-char-lowercase, and
	undeclared-only.  (makehtml generates no comments of its own, and
	always lists all variables.)  I also made a minor bug fix, adding
	the '*' character to the grep patterns for comments in fixed-form
	source, so that asterisk comments will be recognized the same as
	other forms.

2002-10-28  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Received revised makehtml.c from Mark McVeigh.  He has removed
	all the stuff that looked for and invoked forcheck, and has
	replaced it with code to get the needed information from the I/O
	unit usage table.  His work does essentially the same job as my
	code described in 2002-10-18 for the local symbol table, but does
	it in a different way.  This revision has removed the obstacles to
	releasing ftnchek with the -html option added.

2002-10-18  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Finalized the format of I/O unit usage information produced by
	-symtab option.  The usage table is first sorted by unit number or
	unit name (with units having known numbers preceding all those
	without).  For each unit it is sorted by operation, access, and
	form.  (It is unlikely that access mode and formattedness will
	change for a given unit and operation, but the sort looks at them
	in case they do.  For instance, a unit could be closed and then
	re-opened for a different file in a completely different mode.)
	The line numbers remain in ascending order within any sort key.
	After sorting, the table is printed with each unit number and/or
	name, operation, etc. once, followed by a list of line numbers
	where that usage occurs.

2002-08-29  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Corrected an oversight pointed out by J F Harper
	<John.Harper@vuw.ac.nz> in mail of 26 Oct 1998: some compilers
	allow "READ('123.456','(f10.6)') x" with the effect that the
	contents of the literal are read as a variable having the same
	value would be.  But the standard (F90 9.2.2.1) requires an
	internal file to be a variable.  Since this usage might be
	regarded as a feature, the warning should be covered by a -f77 and
	a -f90 flag, but I think it is too rare to be worth it.  The std
	also requires that if an internal file is an array, it cannot be
	an array section specified by an array subscript.  But checking
	this is beyond ftnchek's current ability and not worth adding.

2002-08-23  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Finished basic implementation of I/O unit usage.  The results
	are currently printed in a plain list of usages sorted by line
	number, useful for debugging the code that gathers this
	information.  Eventually the list should be processed to give a
	more useful format for the user.  In the process of adding this
	feature, it became convenient to split use_io_keywords and related
	stuff from symtab.c into its own file, named iokeywds.c.

	Minor bug: line numbers don't record include file situation.
	Generally include files shouldn't do I/O, so this may not be worth
	fixing.

	Quasi-release 3.1.2-2 for Mark McVeigh to work on a finished
	form of I/O unit usage.

	* Fixed erroroneous flag in iokeyword that marked NML as non-f90.

2002-08-18  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Began work on addition of a capability to report on usage of I/O
	units per subprogram.  This is motivated by the desire to remove
	McVeigh's kludge from make_html.  He wants the html file to
	include I/O usage information that is provided by forcheck but not
	currently by ftnchek.  His kludge looks around for forcheck, and
	then runs it to obtain the necessary info.  (See 2002-07-08.)  It
	looks as if it would be quite easy to reproduce the desired
	information by maintaining a simple list of I/O operations.  So
	far I have created a definition of a struct to hold the info, and
	begun getting the parser to gather the needed information as it
	processes an I/O statement.  I envision simply growing an array of
	structs, with each element holding the info from one I/O
	statement.  Then at END_processing time this array can be sorted
	and a report generated.  [When inserting an item in the array, use
	get_parameter_value to provide integer value for an id that is a param.]

	* Revised proj_file_in() in project.c so that it can read a file
	consisting of the concatenation of a number of project files.
	This allows the user to create a single large library project file
	containing all the routines used by the application, so there is
	no need to specify all the project files individually.

2002-07-28  Robert K. Moniot  <moniot@fordham.edu>

	* An idea as to why -mkhtml is slow: the routine
	get_IO_from_forchk is called frequently, and repeats the system
	call to ksh to look up forchk each time.  This could be moved to
	some earlier point so it can be done just once.  Of course, if
	forchk exists, then it too will be invoked repeatedly, but this is
	unavoidable unless ftnchek starts saving the required I/O
	information itself.

	* Made a minor change to McVeigh's alterations of visit_child so
	that it traces the arglist to find the filename of the routine
	both for level 0 and for level > 0.  This change is mainly for the
	sake of consistency, since in a normal program there is only one
	main program and it is not called by any subroutine, so its one
	and only arglist header will be the definition.  But the change
	makes sure that in case of strange input it will still work, and
	besides it is a little more readable this way.

2002-01-20  Robert K. Moniot  <moniot@localhost.localdomain>

	* The new code is also very slow.  Running ftnchek `cat polygraf.opt`
	program without html is 0m0.50 user + 0m0.09 system.  Running it with
	additional args -call=tree -mkhtml is 2m17.4 user + 0m3.6 system.
	Something is definitely out of whack here.

	* There is another problem with McVeigh's code: it wants to invoke
	forchk to get some information about I/O unit usage.  It uses ksh
	for the whence command to see if forchk exists, and if it does,
	then runs forchk.  This will cause portability problems for any
	systems that lack ksh, and may also cause problems on non-Unix
	systems.  (It uses the system() function.)  The best fix will be
	to get ftnchek to acquire the necessary I/O unit information
	itself.  In the meantime, if it gets released before that is done,
	configure is going to have to look for ksh, or perhaps the whence
	command should be replaced by ftnchek's own search on PATH.

	* Fixed a bug in McVeigh's contribution.  He had made changes to
	prlists.c with the aim of making gsymt->info.arglist->filename be
	the name of the file containing the definition of the subprogram.
	But the code had the possibility of leaving the filename
	undefined, which caused seg violations in arg mismatch reports.
	It also produced incorrect filename information in other kinds of
	error reports.  This is not the right place to fix this filename
	information.  I inserted code in makehtml.c that scans thru the
	list of arglists until it finds an id_defn entry, and gets the
	filename from that.  The prlists.c file is reverted to what it was
	in 3.1.2.

2002-01-14  Robert K. Moniot  <moniot@localhost.localdomain>

	* Merged in the patch provided by Mark McVeigh
	<Mark_McVeigh@nfuel.com> to generate html calltree.  This takes a
	new per-file option, -mkhtml, which causes an html description of
	the file (comments, descriptions of variables, but not code) to be
	produced, and if -calltree=tree is also in effect, it generates a
	file named CallTree.html that looks like the call tree but has
	html links to all the individual html files.

2002-01-06  Robert K. Moniot  <moniot@localhost.localdomain>

	* The bastard initializers are in good shape.  Standard-compliance
	warnings are controlled by -f77=initializer and -f90=initializer.
	I added a warning controlled by the former flag about F90-style
	initializers, although this is somewhat superfluous since these
	initializers can only occur in attribute-based type declarations,
	which are already warned about under -f77=attribute.

	I have made the current version a quasi-release as version 3.1.2-1
	to give to Don Laster who instigated this new feature.

2001-12-23  Robert K. Moniot  <moniot@localhost.localdomain>

	* Began putting "bastard initializers" into the grammar.  These
	are type declarations combined with a data-statement style
	initialization, e.g.  INTEGER N / 100 / In the process of putting
	assignment type-checking into this style of declaration, I noticed
	that the F90 style initializers are not correctly checked for
	agreement.  The code in assignment_stmt_type uses the type info in
	the token, not in the symbol table, so the token for the assigned
	variable must first be fixed up using primary_id_expr.  Processing
	of regular DATA statements should be upgraded to do type-checking
	too.  To do this right will also need to add code to go thru lists
	of items for array initializations.

2001-12-22  Robert K. Moniot  <moniot@localhost.localdomain>

	* Fixed a bug that causes seg violation if a parameter is declared
	with same name as subprogram.  This is illegal, but the sanity
	check in def_parameter didn't catch it.

2001-11-18  Robert K. Moniot  <moniot@localhost.localdomain>

	* Released current version as 3.1.2.

2001-11-18  Robert K. Moniot  <moniot@localhost.localdomain>

	* Retracted the fix of labels.c described in 2001-11-12.  (Moved
	it into a side branch, 1.17.1.1)  Replaced it with a different
	fix involving replacement of the invalidated pointers with new
	ones having the same offsets from the base of the array as the old
	ones.  This has the advantage of changing nothing except the
	array-resizing code, and the pointer replacement is done only once
	per resizing operation, and not at all for the majority of
	programs.  Added a new program lotsalabels.f with 2300 label
	references to the test suite.

2001-11-12  Robert K. Moniot  <moniot@localhost.localdomain>

	* Fixed a bug in labels.c reported by Michael Gold <gold@iabg.de>,
	involving the reallocation of space for ref_lists when the table
	fills up.  This caused ftnchek to crash if there were more than
	2000 label references in a single subprogram. (2000=initial value
	of ref_lists_size.)  Bug was actually two bugs.  The first was a
	simple blunder in that the size of the reallocated array was given
	as the number of new elements required, rather than that number
	times sizeof(Lab_ref_list), so it was far too small.  The second
	bug was less obvious: since the how_used pointers of labtable and
	the next pointers of ref_lists were both pointers into the
	ref_lists array, when this was reallocked all pointers would
	become invalid.  Gold suggested a fix whereby the ref_lists array
	is reduced to a simple list of pointers to separately mallocked
	Lab_ref_list elements.  Since these don't get reallocked, the
	pointers remain valid as the array changes size.  This requires a
	separate malloc call on every ref_lists entry that is used.
	(Admittedly, once the ref_lists array reaches its maximum length,
	no more malloc calls would be needed, as the elements are re-used
	when processing subsequent subprograms.)  I preferred instead to
	replace the how_used and next pointers by cursors.  This mainly
	required only changing how_used->field references into
	ref_lists[how_used].field, so it should be about the same
	efficiency as the former code.

2001-10-07  Robert K. Moniot  <moniot@localhost.localdomain>

	* Fixed a bug in keywords.c: the variable hi in the bisection
	search can become -1 when the identifier being looked at is
	alphabetically prior to the first keyword.  This causes an
	array-bounds violation at the point where split_pos =
	keywords[hi].split_pos.  This violation has gone undetected
	since the bogus split_pos is unlikely to correspond to the actual
	position of space in the identifier, but it can trigger a
	segmentation violation or bounds check on some platforms.

	* At the suggestion of Nelson Beebe, I have spent some time fixing
	up the source code to be compatible with C++.  The first step was
	to rename identifiers "class", "operator" and "typename".  Added a
	cast to (char *) onto malloc calls since malloc is (void *) in
	C++.  Then also changed some routines' char * argument types to
	const char * to avoid complaints when these routines are passed
	constant strings.  Decided to continue this trend and changed some
	Lsymtab * and Token * to const where appropriate.  The source now
	is acceptable to g++ and ANSI C.

	Also renamed some variables to avoid gcc -Wshadow warnings.

2001-08-26  Robert K. Moniot  <moniot@localhost.localdomain>

	* Systematically went thru sources and made sure each has $Id: ChangeLog,v 1.21 2005/02/10 01:35:02 moniot Rel $.
	Also updated copyright notice, changing it over to pure MIT
	version.  Mainly, this means removing the restriction about using
	the name ftnchek in advertising.

2001-08-04  Robert Moniot  <moniot@localhost.localdomain>

	* Changed format specs in makedcls.c from e.g. %20s to %20.20s
	(i.e. max field width same as min field width).  This matters when
	using sprintf, and in fact caused a seg violation on input source
	containing very long subprogram names.  I searched for all places
	where sprintf is used with %s, and in all other cases the result
	is guaranteed to be within the buffer size.

2001-05-27  Robert Moniot  <moniot@localhost.localdomain>

	* Changed -source=dec-parameter-standard-type to
	-source=dec-param-standard-type and -source=param-implicit-type to
	-source=param-implicit-type.  There are several other options
	related to parameters, and all use param- so this will be more
	consistent.  I hope it doesn't break too many people's ftnchek.ini
	files.

	* Added parsing of KIND specs for arithmetic types.  The kind
	value for now is expr, not int_constant_expr, because often it
	will be a kind intrinsic function, which are not supported yet.
	However, for character declarations the grammar does use
	int_constant_expr since the special processing done in that
	production is needed for char length values, and it would be messy
	to copy it.

	* Implemented parsing of LEN and KIND specs for character type
	declarations.  The shift-reduce conflict described in 2001-05-19
	was solved by using lookahead to return a special token in place
	of a left parenthesis for the start of such a specifier.  The
	lookahead is needed only in IMPLICIT statements and tests whether
	what follows the type name can be construed as a letter-list.  If
	it can, there is still an ambiguity, since in
	  IMPLICIT INTEGER(m-n)(p-q)
	the (m-n) can be a kind selector where m and n are parameters.  In
	this unusual case the following left parenthesis is the deciding
	factor.  Outside of IMPLICIT statements, it is sufficient to see
	if the type name is followed by a left parenthesis.

	With the new special lparen token, the grammar was fairly easily
	restructured to handle these declarations.  The flag
	-f77=attribute-based-decl is used to control nonstandard warnings
	about this style of selector, even though the syntax is not tied to
	the attribute-based statement form.  The rationale is that there
	is no need to proliferate f77 options, and this syntax was
	introduced as part of the new F90 attribute-based declaration
	syntax.

	The grammar was set up so that the full set of F90 allowable
	combinations (LEN alone, KIND alone, LEN and KIND in either order)
	is parsed, even though KIND specs are not yet supported in the
	type checking.  A warning is given (once per run) if a KIND spec
	is encountered, saying that KINDs are not supported.

2001-05-25  Robert Moniot  <moniot@localhost.localdomain>

	* In advance.c, changed tab-stop computation from array lookup to
	a formula, since the array lookup method bombs if column number
	goes past 80.

2001-05-19  Robert Moniot  <moniot@localhost.localdomain>

	* Fixed skip_quoted_string of advance.c to allow either ' or " as
	the quote delimiter, and to deal correctly with unix backslash
	escapes.  This only matters for something like
	  DO 10 i=len(")"),10
	where the incorrect code would leave the " as the next char after
	see_expression (although the string would be correctly lexed by
	get_string).

	* Added some support for attribute-based type declarations.
	Attributes supported so far are DIMENSION SAVE EXTERNAL INTRINSIC
	and PARAMETER.  The main tricky point is that the attributes must
	be lexed as keywords, despite not occurring in initial position.
	(All of them are IK type).  My first solution to this was to set a
	special flag, in_attrbased_typedecl, upon encountering a comma
	after a type keyword.  Thereafter this flag is used to suppress
	turning off initial_flag after other keywords or commas.  However,
	initial_flag does need to be turned off during lexing of dimension
	bounds, e.g.
	   REAL, DIMENSION(expr,expr), SAVE :: var, var
	To solve this, the normal turning off of initial_flag at the left
	paren is allowed to happen, and the production for the DIMENSION
	attribute turns it back on.

	More problematic is to handle sized type declarations, e.g.
	  CHARACTER*n, DIMENSION(expr,expr), SAVE :: var, var

	Since there is an optional comma following the *n in an F77 type
	declaration, determining if this is attribute-based requires
	looking ahead for the :: separator. (This ambiguity is not present
	in arithmetic type declarations, where REAL*8 cannot be followed
	by a comma in the old syntax.)  A new routine see_double_colon()
	was added to advance.c, which calls see_expression() repeatedly to
	skip over comma-separated items until :: is found, and if found
	sets the flag in_attrbased_typedecl.  This lookahead is only
	called upon in the productions for type*len (both arith and char
	types); for plain type names, an immediately following comma is
	sufficient to know that the declaration is the attr-based form.
	There is also some fancy footwork in forlex.c to turn initial_flag
	off and on as lexing of items proceeds.  The rule is to turn
	initial_flag on if in_attrbased_typedecl is set and a comma is
	encountered, to turn it off on any punctuation if
	in_attrbased_typedecl is not set.  Note that both initial_flag and
	in_attrbased_typedecl get turned off inside the len-spec of the
	type attribute and the dim-bounds of any dimension attribute, so
	commas in those entities will not cause initial_flag to be turned
	on.  I hope that there are no cases where this rule is wrong.

	I also added parsing of an optional initializer, e.g.
	  REAL, PARAMETER :: parm=expr
	Note that in the absence of the :: a declaration like
	  REAL n=10
	is indistinguishable in fixed form from an assignment statement.
	The F90 standard forbids this form of initialization and it is
	properly dealt with by ftnchek which lexes the beginning as a
	variable REALN.  Since array constructors are not supported yet,
	the initializer is not allowed on array declarations.

	Ultimately we will want to support (KIND=expr) and (LEN=expr)
	qualifiers.  I made an initial attempt to put this into the
	grammar (using symbolic_name for the keywords in the same manner
	as I/O keywords are handled).  However, there is a shift-reduce
	conflict with IMPLICIT statements, where a type_name is also
	followed by a left parenthesis.  Solving this conflict will either
	require duplicating the whole type_name production tree separately
	for IMPLICIT statements, or else figuring out how to make the
	lexer give a special kind of left parenthesis for one of these
	productions.

2001-05-12  Robert Moniot  <moniot@localhost.localdomain>

	* Updated INSTALL section on Mac-MPW.  Edited the newly updated
	makefile.mpw to include the files split off from symtab.c.

2001-05-06  Robert Moniot  <moniot@localhost.localdomain>

	* Noticed that the tables in ftnchek.doc were not being processed
	correctly: for instance tables of intrinsic functions in the
	-intrinsic section.  So I fixed the Makefile rules for
	ftnchek.doc, ftnchek.hlp, and blurb.txt to use tbl preprocessing.
	(Doesn't actually matter for blurb.txt, which has no tables.)  I
	did not include eqn preprocessing, since GNU eqn in this context
	complains "warning: /usr/bin/eqn should have been given a
	`-Tascii' option" but I suspect that other eqns do not accept the
	-Tascii option, and I don't want to have to test in configure for
	whether eqn is GNU.  The ftnchek.man source doesn't use eqn stuff
	anyway.

	* Fixed up make_html.sh so that it stores sections lbAB and lbAC
	(NAME and SYNOPSIS) in a single section file named index.html and
	refers to these sections by hrefs to this file.  Formerly these
	sections were stored in file lbAB.html and symlinks index.html and
	lbAC.html were created to point to lbAB.html.  The new arrangement
	avoids symlinks, which are not supported on some (so-called) OSes.
	These sections have NAMEs lbAB and lbAC so they can be referred to
	individually by href="index.html#lbAB.html" etc. (This is only
	done in toc at the moment.)

2001-05-05  Robert Moniot  <moniot@localhost.localdomain>

	* Added checking for modification of active DO index (F77 standard
	section 11.10.5.)  This needs to be done via two cooperating
	flags: one flag in Lsymtab entry for the index variable is turned
	on and off as one enters and leaves range of the DO.  This flag
	suffices for checking local modification of the DO index.  The
	other flag in Token is set if the Lsymtab entry flag is set at the
	location where the variable is used.  The token flag is what gets
	copied to arglists, preserving the dynamic information about
	active status of the variable.

	Note: this new check requires an additional arglist flag, using up
	the last future flag placeholder in project file.  Any more
	arglist flags will require a new project file format.

2001-05-04  Robert Moniot  <moniot@localhost.localdomain>

	* Fixed a minor flaw in appearance of warnings about mismatching
	argument where a label is involved: instead of printing both type
	and storage class as "labl label" it only prints "label".

2001-05-03  Robert Moniot  <moniot@localhost.localdomain>

	* Changed the -project option to a warnlist form.  Options are
	-project=create,trim-calls,trim-common.  By default, create is
	FALSE and trim-* are TRUE.  The usual thing will be to say
	-project, which will turn them all on, and the behavior will be
	the same as previously when compiled without PROJ_KEEPALL defined.
	Using no-trim-calls or no-trim-common causes the former
	PROJ_KEEPALL behavior to be in effect for calls/definitions of
	subprograms and for declarations of common blocks respectively.
	The behavior of this option is slightly non-intuitive:  Saying
	-project=no-trim-* will not turn on the create option and so no
	project file will be created.  To get the keepall behavior, one
	has to say -project=create,no-trim-*.

2001-04-30  Robert Moniot  <moniot@localhost.localdomain>

	* Added some new -style options: goto, format, labeled-stmt.
	The goto option warns about unconditional, computed, or assigned
	goto statements, and also about alternate return.  The other two
	complain about labeled statements.  I divided them into covering
	format and non-format since I don't see a structured-programming
	objection to format statements and they are even convenient
	(e.g. not requiring escaping quote marks); hence I think that one
	can legitimately want to keep them around even if F does not.

	While I was doing the alternate return style warning, it occurred
	to me that another thing to check would be if the return value is
	a constant and is not between 1 and the number of label arguments.
	This is not contrary to the standard; if the value is out of this
	range the statement is equivalent to a normal return.  But a
	constant value that is out of range suggests a programming
	oversight.  This warning is covered by a new -pretty option
	-pretty=alternate-return.

2001-04-27  Robert Moniot  <moniot@localhost.localdomain>

	* Fixed a bug reported by Joonas Pihlaja
	<jpihlaja@cc.helsinki.fi>: in arglists, the array dim info is set
	to garbage for actual arguments that are parameters.  The bug is
	in make_arg_array, where nullity of info.array_dim is used instead
	of falseness of symt->array_var to distinguish between arrays and
	scalars.  This was correct in the old days before param was a
	variant field of InfoUnion.  The bug has no effect on checking of
	such arguments, since argcheck looks at the array_dim flag before
	using the array_dim information.  But Joonas wanted to use the
	project file itself for some purposes and the bug causes trouble
	there.

2001-04-26  Robert Moniot  <moniot@localhost.localdomain>

	* Modified add_html_refs.sh and make_html.sh so that they work
	correctly when ftnchek.html is generated by vh-man2html.  This
	program does a better job than rman now.  (One big plus: it
	correctly interprets .nf \fC ... \fR .fi as <PRE> ... </PRE> which
	eliminates the by-far biggest part of the patch needed by rman.
	It also seems to generate cleaner HTML.)  The only worry I have
	about relying on man2html is that since it is part of the RedHat
	man rpm, it may change incompatibly after a system upgrade.  But I
	have the source for vh-man2html, which appears to be essentially
	the same (except for the form of man-cgi hrefs).  It is not
	exactly the same, since it is tailored for use as a cgi, and
	requires a valid man path.  I had to comment out that part of the
	code to make it usable.  But there it is as a fallback.  BTW, I
	also compared Beebe's man2html and found it better than rman but
	not as good as vh-man2html.  It is also slower, being a script.

2001-04-21  Robert Moniot  <moniot@localhost.localdomain>

	* Added printout of total and max per-routine numbers of statement
	labels defined for -resource option.

	* For future reference, at this time (after dynlab optimization)
	the top 10 items in profile timing on pfort are:

	%   cumulative   self              self     total           
       time   seconds   seconds    calls  us/call  us/call  name    
       33.06      1.63     1.63      119 13697.48 40640.96  yyparse
       10.34      2.14     0.51   228783     2.23     3.63  advance
       10.14      2.64     0.50    68657     7.28    37.58  yylex
	9.33      3.10     0.46    21831    21.07    48.84  get_identifier
	3.45      3.27     0.17     9688    17.55    35.36  get_number
	2.84      3.41     0.14    32847     4.26    16.80  get_punctuation
	2.43      3.53     0.12    19211     6.25     7.15  hash_lookup
	2.43      3.65     0.12    11612    10.33    10.33  getstrn
	1.83      3.74     0.09     7461    12.06    12.06  is_overlength
	1.22      3.80     0.06    41817     1.43     6.24  closeup

	* More profiling and optimizing.

	3. sort_labtable (labels.c:147, 145, 151), init_labtable
   (labels.c:616) The problem is clearly similar to hashtable fixed earler,
   i.e. the sparseness of the table.  Labels are stored in an array
   indexed by hash value which is the label number itself.  Unused
   label values are marked by NO_LABEL, and the table needs to be
   re-initialized for each subprogram.  Also, when reporting on
   labels, the whole table needs to be scanned, skipping empty
   entries.  With label table size of 30013, it spends a lot of time
   dealing with empty slots.

   Testing by making LABTABLE_SIZE much smaller, namely 1000:
   Timing data on pfort.time:
       Original: 7.14user 0.26system
       fasthash: 5.56user 0.13system
       labsz100: 3.19user 0.14system

   Most programs nowadays use rather few labels.  For instance, the
   pfort package has at most 62 labels in any subprogram.  However, it
   is not possible to rely on users' programs defining less than 1000
   labels in any one subprogram, especially old, large codes.  We need
   a graceful way to deal with large numbers of labels without
   incurring the high overhead.

   a. (dynlab) Dynamically allocate the label table.  Start with a
      relatively small size that should be sufficient for most
      programs, then double the size of the table if the table starts
      to fill up.  [Precisely: if the number of labels reaches half
      the table size, increase the size of the table.  To keep the
      number of clashes low, calculate the new size as the old
      size*2+1.  Start with a size that will remain without factors of
      2 or 5 for several iterations of increase.]

      Improvement: pfort.time
       Original (LABTABLE_SIZE=30013): 7.14user 0.26system
       fasthash (LABTABLE_SIZE=30013): 5.56user 0.13system
       dynlab (LABTABLE_SIZE=299):     3.26user 0.11system

      The profile data on pfort:
       fasthash (LABTABLE_SIZE=30013):
                                              us/call
                          self s   calls  self     tot
			  1.65      136 12132.35 12132.35  sort_labtable
			  0.50      137  3649.64  3649.64  init_labtable

       dynlab (LABTABLE_SIZE=299):
                                              us/call
                          self s   calls  self     tot
			  0.03      136   220.59   220.59  sort_labtable
			  0.01      137    72.99    72.99  init_labtable

   Problem solved.  Change ACCEPTED.

   b. It seems it might be useful to increase LABTABLE_SIZE to around
      1000 so that if all labels are 2 or 3 digits, they will be in
      ascending order in the table and so sort_labtable will go
      faster.  The value of this strategy depends a bit on how many
      programs use 3-digit labels and how many use 4- or 5-digit
      labels as a matter of style.  Tried this, using
      LABTABLE_SIZE=1001, on pfort and found increase in profile times
      of both sort_labtable and init_labtable, so the size is kept at 299.


2001-04-18  Robert Moniot  <moniot@localhost.localdomain>

	* Doing some profiling and optimizing.

	1. init_symtab (symspace.c:79) loop to clear hashtab.  Hashtable is
   20930 elements, of 5 pointers or 20 bytes each, total 418600 bytes.
   From gprof on pfort: 20% of run time spent here.  Called 137 times,
   cumulative 2.12 sec, 15 ms per call.  Attributing all of this to
   the loop means 37 ns = 3.3 cycles to clear each byte, for 90 MHz clock.

   (HSZ798) To test this theory, recompiled using -DHASHSZ=798 (the
   SMALL_MACHINE value), and found that the time (see below) decreased
   by about 2.3 seconds, consistent with the profiling numbers.

   a. (memset) Tried replacing this loop with memset.  No significant
      change.  Withdrew the change.

   b. (ptrloop) Tried replacing loop with one using int pointers,
      setting elements as ints to 0.  No signifiicant change.
      Withdrew the change.

   c. (seekout) Tried alternative loop thru local and global symbol
      tables, clearing hash entries corresponding to symtab entries.
      Since hash table is usually sparsely populated, this should need
      to deal with a lot fewer hashtab entries.  Unfortunately, some
      inefficiency is introduced since the name field has to be spared
      until all all symbol table pointers have been accounted for.
      Also, hash value must be computed on each entry.

      Improvement: pfort.time
         Original (HASHSZ=20930): 7.57user 0.32system
	 Original (HASHSZ=  798): 5.27user 0.23system
         Seekout  (HASHSZ=20930)  5.45user 0.14system

      A really clever implementation would combine this with
      rebuilding the global hash table.

      PROBLEMS: this method ran into trouble since there are some
      strings that get into the hash table but not made into symbol
      table entries.  (Mainly I/O keywords and certain types of
      constants such as character declaration lengths.)  These become
      dangling pointers to local symbol space if they are not cleared.
      They can be hunted down by scanning local string space, but they
      cannot simply be zeroed: upon finding a NULL in the hash table
      for one of these we cannot be sure it was never put in, since it
      might be a clash with a name that was nulled earlier in the
      search.  A solution to this problem is to put them into the
      symbol table to be deleted in the subsequent sweep (where all
      names are guaranteed to be in a symbol table, so a NULL name
      means a deleted clashing entry), but this is starting to look
      like a losing proposition.  Withdrew the change.

   d. (permsym) Learning from seekout, there is no intrinsic problem
      with having hash table entries with null symbol table pointers.
      The problem caused by symbols in hashtable but not symbol table
      comes about when the local string space is cleared and re-used,
      so the pointers to these strings in the hash table dangle,
      causing false clashes etc.  A simple solution is to forget about
      re-using local string space.  Let it grow!  Leave all name
      pointers in the hash table!  The hash table is large.  Then all we
      need do is scan thru the local symbol table, look up the names in
      the hash table, and zero the local symtab and local common pointers.
      This also avoids the need to rebuild the global-symbol hash table.

      (To do: if HASHSZ is small, revert to the old way.  Also, use the hash
      table to good effect to avoid duplicating strings in local
      string space.)

      Note that this change reduces the number of hashtable pointers
      cleared per entry from 5 to 2, so the straight hashtable-
      clearing version also benefits.

      Improvement: pfort.time
         Original (HASHSZ=20930):        7.57user 0.32system
         Permsym-clrhash (HASHSZ=20930): 6.22user 0.18system
	 Permsym-clrlocs (HASHSZ=20930): 5.43user 0.30system

      Penalty on strings: pfort.resources
         Original: Max identifier name chars used = 625 local
	 Permsym:  Max identifier name chars used = 4914 local

      This seems a reasonable price to pay for the speedup.  This change
      ACCEPTED.

      Calculations:
        The maximum local symbols in pfort is 150.  Average number
        (found by special run with instrumenting code) is 3658/137 =
        26.7.  The self us/call for the new one is given by gprof as
        0.00 since most of the time is spent in hash_lookup.  So find
        correct value (including hash_lookup) by subtracting the amount
        for init_labtable from the total us/call: 4656.06 - 4452.55 =
        203.51 us/call.  Check: hash_lookup = 7.62 us/call x 26.7 ave
        calls per call of init_symtab = 203 us/call: OK.
            Timing for init_symtab:
          permsym-clrhash: 6131 us/call / HASHSZ =   0.29 us/iteration
                                                 =  26    cycles/iteration
          permsym-clrlocs:  204 us/call / 26.7   =   7.6  us/iteration
                                                 = 686    cycles/iteration

        So the clrlocs loop takes 26 times as long per iteration as
        the clrhash loop.  (Reasonable since it needs to compute a
        hash value on each entry.)  Thus the clrhash loop should be
        used whenever loc_symtab_top > HASHSZ/26 = 800.


	2. hash (symtab.c:2759) from calculations above, we notice that hash
   calls take most of the time now spent in init_symtab, so the latter
   can be made faster by making hash faster.  It is obvious that
   avoiding the strlen call should save significant time.

   a. (fasthash) Replaced the code in hash() by two separate loops,
      for sixclash and non-sixclash cases separately. 

      Improvement: pfort.time
        permsym-clrlocs: 5.43user 0.30system = 5.73 tot
	fasthash:        5.56user 0.13system = 5.69 tot

      This has shifted time from system to user, with a small net
      gain.

      The profile data for now show
                                              us/call
                          self s   calls  self     tot
        permsym-clrlocs:   0.06    19211  3.12     7.62  hash_lookup
	fasthash:          0.05    19211  2.60     5.83  hash_lookup

      The time per call for init_symtab is now 3805.26-3649.64=155.62
      us/call, down from 203.51 in 1.d above.  The ratio between
      symtab lookup and hash lookup is now 20, down from 26.

      Change ACCEPTED.

   Still, all of this is small potatoes since all hash calls are only
   1% of total execution time (was 1.39%).


2001-04-14  Robert Moniot  <moniot@localhost.localdomain>

	* Split symtab.c into smaller pieces: prlists.c contains
	process_lists and its private routines, symutils.c contains the
	few routines shared by symtab.c and prlists.c, symspace.c contains
	the init_symtab and new_* routines that manage allocation of new
	objects.  This reduced symtab.c from about 5000 to 2800 lines.  It
	is probably not worth while to trim it further since the remaining
	routines (def_*, ref_*, use_*, etc.) share a lot of private stuff.

2001-04-12  Robert Moniot  <moniot@galileo>

	* Moved blockcheck flag variables into ftnchek.h, and renamed them
	stylecheck, for the new -style flag.  The new version, saved on
	branch as 1.25.1.7, is now merged backed into the main rcs stream
	as 1.27.  The branch can be deleted when convenient.

2001-04-08  Robert Moniot  <moniot@galileo>

	* The block-balancing code in fortran.y is now complete, I think.
	I have included a bunch of picky checks for users who want to
	enforce F90 structured style.  These are controlled by a new
	warnlist option -style.  While adding this, I realized that there
	is no reason for the char *xxx_warn_list variables to be in
	ftnchek.h, since they are only used by options.c.  So I moved them
	into options.c and placed each one next to the WarnOptionList
	struct definition with which it is associated.  This will make
	adding new options less prone to the error of forgetting this
	companion variable.

	* The new code needs a way to map token numbers for block closing
	tokens to the corresponding block opening tokens.  To make this
	mapping efficient, a lookup table
	(e.g. lookup_table[tok_ENDIF] = tok_IF) is generated from
	tokdefs.h by a Perl script named make_blockmatch.pl. The Makefile
	has a target to send the output of the Perl script to
	block_match.h if tokdefs.h changes.

2001-03-31  Robert Moniot  <moniot@galileo>

	* Removed lint reported by Beebe: unused variable inc_lineno in
	loccheck.c.

2001-03-21  Robert Moniot  <moniot@galileo>

	* The current edition (without block balancing but with ELSE bug
	fix) is released as version 3.0.4.

	* I have begun adding code to fortran.y to check block structures
	for balance.  So far I have done subprogram opening and END and
	started doing IF blocks.  In the course of testing the IF block
	balancing, I noted the ELSE bug described in the next paragraph,
	so the new version of fortran.y has been put into a side branch,
	revision 1.25.1.1, while the bug is fixed and a new patch version
	is released.  One other minor change has been made: definitions of
	LABEL_t and NO_LABEL were moved from labels.c to symtab.c so that
	they can be used by the block-balancing code.

	* Fixed bug introduced by changes made on 2000-07-21: the ELSE
	keyword cannot have the NA (not followed by alphabetic) flag since
	it can be followed by an if-construct name.  So I have removed the
	NA flag.  This means that ELSEIF is not lexed, so tok_ELSEIF has
	been deleted.  In the grammar, the else_if_stmt production now
	uses tok_ELSE tok_IF.  This arrangement requires special treatment
	when the keywords are not separated, to suppress the -pretty
	warning "keyword not clearly separated from context".

	To prevent this bug from recurring, I have added a test program
	blockcheck.f90 to the regression suite.  It contains IF, DO, and
	SELECT CASE constructs with and without construct names.

2001-03-04  Robert Moniot  <moniot@galileo>

	* Replaced the configure defn of lispdir by the one recommended in
	the standards info page: lispdir='${datadir}/emacs/site-lisp'
	where datadir=`$(prefix)/share' by default.  Previously,
	ftnchek.el was put into the first site-lisp directory found to
	exist from a list of various locations.  This was done because (a)
	in older times, emacs' site-lisp directory was often located in
	odd places, and (b) ftnchek.el could be considered part of emacs
	rather than part of ftnchek, so need not go in the same place
	(usually prefix=/usr/local) as emacs (e.g. prefix=/usr).  This
	change was recommended by Nelson Beebe.  For systems like mine
	where there is no /usr/local/share/emacs/site-lisp and it is not
	on the emacs load-path, one can either run configure with the
	option --datadir=/usr/share, or run "make install" with the option
	libdir=/usr/share/emacs/site-lisp.

2001-02-11  Robert Moniot  <moniot@galileo>

	* Applied patch due to Michael Taeschner and provided by Stefan
	Deutscher to expand wildcard arguments under OS/2 or DOS with the
	EMX library.

2001-02-03  Robert Moniot  <moniot@galileo>

	* Applied patches from Manfred Schwarb to fix two bugs in dcl2inc.
	The first patch modifies dcl2inc.awk so that it can recognize
	structured comments and common block declarations in free source
	form as well as fixed form.  The second fix modifies makedcls.c so
	that namelist declarations precede common block declarations in
	the declarations file.  This is necessary since dcl2inc assumes
	that common block declarations are last.  Up to now dcl2inc would
	omit any namelist declarations in the .dcn file produced for any
	program containing both namelist and common declarations.

2001-02-02  Robert Moniot  <moniot@galileo>

	* Fixed an oversight in Makefile: it listed the MS Developer
	Studio project files as ftnchek2_12.ds[pw] instead of the updated
	ones for version 3.0.  I have renamed the files ftnchek.ds[pw] so
	that the Makefile need not be edited as the version changes.  I
	just need to make sure that the current project files are the
	correct ones.  Pointed out by Gunnar Duus, who supplied the
	project files.

2001-01-21  Robert Moniot  <moniot@galileo>

	* Released current version as 3.0.2.

2001-01-19  Robert Moniot  <moniot@galileo>

	* Modified report_type() and the places warning about integer
	quotient expressions in exprtype.c so that they print the source
	text of an expression or constant instead of simply saying "expr"
	or "const".   For example, average.f now gives:
	  Warning near line 16 col 20 file average.f: integer quotient expr
	  SUM/COUNT converted to real

	* Fixed bug: by a complete oversight, the production format_id did
	not call ref_label, so the statement ``PRINT 123, X'' (or any
	other I/O statement with a non-parenthesized format label,
	e.g. READ, ACCEPT, and TYPE, failed to set the referenced bit of
	the label.  Easily fixed.

2001-01-17  Robert Moniot  <moniot@galileo>

	* Modified assignment_stmt_type() in exprtype.c to suppress
	truncation warning on assignment of I = const where I is a short
	integer and const is a small integer literal constant.  "Small" is
	defined as having magnitude <= SMALL_INT_VALUE, which is defined
	in ftnchek.h as 127.  Also suppresses this warning on L = const
	where L is a short logical and const is .TRUE. or .FALSE.  The
	warning is not suppressed for X = const where X is a single-
	precision real and const is a double-precision constant, since in
	this case the programmer has control over the size of the const.
	Also not suppressed if the const is a parameter, since again the
	programmer has control over the size.  Also not suppressed if the
	const is an expression involving only literal constants, since
	this is not a property currently propagated by the parser.  It
	would require a new token flag bit, not worth the trouble.

2001-01-07  Robert Moniot  <moniot@galileo>

	* Incorporated changes to makedcls.c contributed by Manfred
	Schwarb <schwarb@geo.umnw.ethz.ch>.  The format of dcl files does
	not allow enough room for long file names.  The result is that
	dcl2inc generates a file with the truncated name which (a) differs
	from the name of the dcl file and (b) may clash with another
	file name if their chopped parts are the same.  The new format
	splits the comment line describing module name, filename and
	declaration options into two comment lines, one with the module
	name and file name and the next with the options.  The Begin
	Module line is re-formatted to allow more room for module name
	(was 8, now 20 chars) and file name (was 12, now 25 chars).  The
	End Module comment line is likewise re-formatted with more room
	for the module name.

	I also changed the options comment to document whether or not
	exclude-sftran3 was specified.  This is about the only other
	option besides undeclared-only that is not self-evident from the
	dcl file.  (Possibly suppress-array-dimensions should also be
	documented, but there is not room on one line to include all
	three of these options.)

	The new format also trims off any leading path on the filename.
	Maybe this trimming should be controlled by yet another option.

2000-12-30  Robert Moniot  <moniot@galileo>

	* Fixed minor bugs in Makefile install target: creating bindir and
	mandir if they don't exist, and including the optional .exe
	extension on executable.

2000-11-17  Robert Moniot  <moniot@galileo>

	* Released current version as 3.0.1.

2000-11-05  Robert Moniot  <moniot@galileo>

	* Changed the -makedcls=bang-comment option implemented on
	2000-10-13 to -makedcls=free-form, and fixed the declarations so
	they are appropriate for f90 in this case:
	  -- comment character is !
	  -- continuation is indicated by & at end of line
	  -- declarations are indented by 2 cols instead of 6
	  -- max continuation lines is 39 instead of 19
	  -- numeric parameter values have blank space removed

	* Fixed a family of bugs pointed out by van den Berge, in which
	the Lsymtab info field is used incompatibly.  The info field is a
	union used to store array dimension information, parameter value
	and source text, subprogram argument token lists, namelist token
	lists, and intrinsic function information.  Declaring something in
	two categories causes a segmentation violation.  (In some cases it
	crashes always, in other cases only when -makedcls is given.  For
	for namelist/subprogram no crash but confused processing.)  The
	specific example reported was this:
          integer         PIEP
          parameter       (PIEP = 77)
          call piep (count)
          end
	[Note that common block declarations also use the info field, but
	these do not cause trouble since common block names have a
	separate symbol table space.]  I have added code to check for
	incompatible use of the info field.  In all cases the matter is a
	syntax error, so handling can be limited to avoiding a crash.  The
	right thing to do varies: in some cases, simply reset the info
	field to NULL, and cancel the earlier declaration.  However, this
	can cause a subprogram to generate an Oops message "global symbol
	has no argument lists" so in such cases the routine simply returns
	to caller, ignoring the new declaration.

	It may be worth noting that in F90, parameters can be array-
	valued, so at least these two categories of information will need
	independent info fields when this feature is supported.

2000-10-13  Robert Moniot  <moniot@galileo>

	* Fixed two bugs in makedcls feature, one pointed out by Ajit
	Thakkar.  First, added a -makedcls=bang-comment-character option
	to select '!' instead of 'C' as the comment character.  This is
	necessary for free source form.  The new behavior is that '!' is
	used if this option is specified or if the source is being
	processed in free form mode.  (Actually, asterisk-comment and
	lowercase-comment take precedence over bang-comment if they are
	specified.  There is no checking for collision of these options.)
	Second, I noticed that if one uses the option-list form rather
	than numeric form of this flag, and does not specify the
	"declarations" option, output of the declarations goes to stdout
	instead of a file.  Fixed this by having the dcl-file opening code
	check all the flags, so only the desired options need be specified.

	There is another shoe to go with this one: makedcls need not
	indent to column 7 when free source form is used, and continuation
	lines need to be done differently.

	* Ajit Thakkar pointed out that the man page doesn't mention the
	new -source=fixed and free options.  Wrote them up.

	* Fixed little bug in ftnpp/Makefile.in: CC=@CC@ since although
	$(CC) does not appear in Makefile, it is in a default rule, and so
	the configured value should be there to prevail over the local
	system default if they differ.

2000-10-02  Robert Moniot  <moniot@galileo>

	* Released the current version of ftnchek as 3.0.0.  Released the
	current version of ftnpp as 1.1.

2000-09-18  Robert Moniot  <moniot@galileo>

	* Fixed forlex.c to be compatible with an ftnpp that uses fpp: it
	now ignores both # 1 "" and # 1 "stdin" forms: the first is from
	GNU cpp, the second from fpp.  It should be noted that fpp's
	default assumption of free form requires the -fixed flag to be
	provided to ftnpp explicitly unless it provides it; it might be a
	good idea to have ftnpp provide it automatically based on the file
	suffix.  Ironically, however, the -fixed flag should *not* be
	provided when running checkftnpp using ftnpp that calls fpp: for
	fixed source, fpp turns numeric continuation marks into asterisks,
	causing a diff wrt Okay/filter.fcl, which happens to have an
	ftnchek error message on a continuation line with a numeric
	continuation mark.

2000-09-17  Robert Moniot  <moniot@galileo>

	* Spent some time fixing up ftnpp.  The bug described on
	2000-09-08 that causes blank space after a substituted macro is
	from the lack of -traditional flag.  This flag used to be provided
	by test/Makefile but stopped when CPPFLAGS was withdrawn from
	ftnchek's configure.  I have moved the provision of this flag into
	ftnpp itself (which means it can't be suppressed by any run-time
	means).  So checkftnpp once again passes.

	I also looked at fpp, a.k.a. fdfpp, some more, thinking it could
	replace ftnpp.  This is originally by someone at Sun and is
	available from netlib/fortran.  It does not look inside
	f90-standard include files,  so it cannot replace ftnpp, but it
	might replace cpp for use by ftnpp.

	If fpp is to replace cpp, here are some hitches: it does not
	accept the -traditional flag, so configure would need to suppress
	it.  It assumes free format for all files not ending in '.F',
	which means that fixed-form files ending in '.f' would need the
	-fixed flag.  The biggest incompatibility for use with ftnchek is
	that if input is from stdin, fpp's #line directives say "stdin"
	instead of "", which breaks the workaround described on
	1999-10-12.  Perhaps the workaround should be augmented to ignore
	#line 1 "stdin" as well.

	These problems are due to ftnpp piping its output through cpp (or
	fpp), which therefore sees input as coming from stdin.  If instead
	ftnpp passed the filename to cpp and read cpp's output, the
	problem would go away.  However, there is a fundamental obstacle
	to this reversal: ftnpp would need to open the F90-std include
	files and pipe them thru independent cpp processes.  This means
	#define's in the parent file would not take effect.

2000-09-16  Robert Moniot  <moniot@galileo>

	* Added a check in Makefile so that editing of fortran.c yytname
	table is done only if YACC is bison.  Otherwise a contributor who
	messes with fortran.y and doesn't rebuild it with bison may get a
	clobbered parser.

	* Removed f90_long_labels from the -f90 options and replaced it by
	misc_warn.  I decided that statement labels exceeding 5 digits
	should be treated the same way as free-form misused space: a
	syntax error, not a supported extension.  and the error messages
	are controlled by misc_warn.

2000-09-08  Robert Moniot  <moniot@galileo>

	* Unbundled ftnpp from the ftnchek distribution.  It is now in its
	own directory ftnpp-1.1 and has its own configure and Makefile.
	It has only been tested for correct build and other make targets.
	It fails "make check": for some reason when it substitutes a
	macro, the macro is followed by a blank space, which did not
	happen before.  This may be due to a change in cpp.

2000-09-04  Robert Moniot  <moniot@galileo>

	* Removed f90_freeform_space from the -f90 options and defined it
	as misc_warn.  Also changed the warnings it generates from
	"nonstandard" to "syntax error".  The reason for this change is
	that as a -f90 option, by default it would be off whereas
	-pretty=*-space would be on, so violations would be flagged as
	"possibly misleading appearance" instead of "nonstandard".  There
	seems to be no valid excuse to disobey the F90 standard with
	respect to free-form blank space, so making it a syntax error
	should not bend anybody out of shape.  (The message is syntax
	error rather than nonstandard so that users will look to -nocheck
	if they do want to turn it off.)

2000-07-21  Robert Moniot  <moniot@galileo>

	* Discovered that ELSEIF was being lexed as tok_ELSE tok_IF.  This
	is treated unlike all other cases of a keyword that can stand
	alone or be a substring of a longer one, where the longer
	possibility is lexed as a single token.  This caused a problem
	with "keyword IF not separated from context" when ELSEIF was
	encountered.  To avoid making ELSEIF a special case, I added NA to
	the definition of ELSE so that tok_ELSE is returned only if alone
	on a line.
	**2001-03-18 noticed that this change introduced a bug: now ELSE
	followed by a construct name is lexed as an identifer.***

	* Backed out of change 2000-07-19 to closeup and bi_advance.  It
	is better to keep blank insensitivity in the lexer but warn about
	it, than to force parse errors which are harder to control and
	recover from.  I have fixed up forlex.c and keywords.c so that
	blanks embedded in tokens get warned about in free form mode in a
	few places that they are not warned about in fixed form mode:

	  -- blanks embedded in numeric constant
	  -- blanks embedded in typeless constant
	  -- blanks between a period and the rest of a dotted keyword.

	Also, get_identifier has been enhanced to check whether a space
	inside a two-part keyword (like DOUBLE PRECISION) is in the place
	where it is allowed by the F90 standard for free form.

	All of these cases are currently warned about under control only
	of the -pretty=embedded-space.  All free-form does is to set the
	space detector a bit tighter.  Probably a new flag should be
	introduced, -f90=embedded-space to produce the warnings when
	free-form mode is turned on even if the -pretty warnings are
	turned off.

	* For the sake of clarity for future developers, I have removed
	the residua of the split-keywords days.  In the original version
	of ftnchek, which was blank-sensitive, a token pair like DO WHILE
	would have been lexed as tok_DO tok_WHILE.  The blank-insensitive
	version always lexes this as tok_DOWHILE.  So I have removed
	tokens that never get lexed any more: BLOCK, DOUBLE, GO, and
	PRECISION.  I also changed the comments to reflect the present
	behavior of is_keyword.

	In the process, I discovered that changes made in 1999-04-04 to
	fortran.y (r1.3 to r1.4) removed the production of do_handle
	tok_WHILE, probably under the mistaken impression that this is
	handled by other productions.  But the form DO label [,] WHILE
	requires this production.  Hence recognition of it was broken as
	of v2.11.0.  So I have added it back to the grammar, and augmented
	do_enddo.f with suitable syntax to check it.

2000-07-20  Robert Moniot  <moniot@galileo>

	* Here are some decisions made about toleration/warning for
	lexical constructions not conforming to f90 standard for free
	source form:

	  -- No limit on number of continuation lines.  (Std = 39 max,
	     3.3.1.4.)  Warned about under -f90=continue.

	  -- An & on a line with nothing else but blanks and commentary is
	     treated as commentary.  (Disallowed by standard 3.3.1.3.1.)
	     Warned about under -f90=continuation.

	  -- Statement labels over 99999 are accepted.  (Std = 5 digits
	     max, 3.2.5.)  Warned about under -f90=long-labels.

	  -- Line length cannot exceed 132 chars (3.3.1).  Code to warn
	     about going beyond limit is in advance() but not tested and
	     cannot be reached unless (1) MAXLINE is increased and (2) an
	     option is added similar to -columns=dd, which only applies to
	     f77 max line length.

	  -- Typeless constants (binary, octal, hex) are evaluated and
	     parsed if they contain blanks or other improper characters,
	     but generate a syntax error (no flag to suppress).

2000-07-19  Robert Moniot  <moniot@galileo>

	* Revised closeup and bi_advance to avoid gobbling whitespace in
	free form mode.  Lexer behavior is now correct on dotted keywords,
	punctuation tokens and numerical constants (including typeless
	constants).

2000-07-17  Robert Moniot  <moniot@galileo>

	* Finished the revisions to advance() for free source form.  This
	routine now correctly handles the removal of comments and the
	gluing together of continuation lines for both source forms.  Began
	working on yylex and friends.  So far only get_label is revised.

2000-07-16  Robert Moniot  <moniot@galileo>

	* Began revising advance() to support free source form.  Selection
	of source form is based on filename extension: .f90 or .F90
	implies free form, and all other extensions imply fixed form.  The
	default selection can be overridden by new -source options: either
	-source=fixed or -source=free.  The -source=free option cannot be
	given with either -source=fixed or -source=dec-tab.

	* Added new feature to recognize semicolon as a statement
	separator.  This is allowable in F90 for either fixed or free
	form.  As implemented (and as per standard) it does not allow a
	label to follow a semicolon in fixed form (parse error).

	* Broke up forlex.c into four separate files: advance.c with
	advance() and its associated routines; forlex.c with token-getting
	routines; keywords.c containing the former contents of keywords.h
	as well as get_identifier and is_keyword; and include.c with all
	the routines to find, open and close include files.  New (actually
	resurrected) header file forlex.h contains definitions shared by
	these four files.  Some stuff that is strictly between advance.c
	and include.c is in advance.h.

2000-07-14  Robert Moniot  <moniot@galileo>

	* Revised the command-line options controlling label-related
	warnings and errors: removed the -label option entirely.  The two
	options related to goto referencing non-executable and fmt_id
	referencing non-format are now under -check since these are always
	syntax errors.  The two options for undefined and unused labels
	are now under -usage.  (Undefined label could be under -check
	since it is a syntax error, but it fits OK as a usage check.)

2000-07-13  Robert Moniot  <moniot@galileo>

	* Moved check_loose_ends from symtab.c to loccheck.c and changed
	the syntax_error calls to local_err_head calls to provide more
	information and for consistency with other local checks.

2000-07-11  Robert Moniot  <moniot@galileo>

	* Heba Elsayed has fixed the label-checking code to include
	references to include files where applicable.

2000-07-08  Robert Moniot  <moniot@galileo>

	* John Bollinger has submitted a patch to add recognition of
	SELECT CASE construct to the grammar.  This has been added to the
	3.alpha version.

2000-07-06  Robert Moniot  <moniot@galileo>

	* Note for future reference: rman is provided by RPM package
	kdebase.  This means that whenever an upgrade affects kdebase,
	rman may change and give different output even if ftnchek.man has
	not changed.  Mainly a pain if the difference affects areas that
	are patched by ftnchek.html.patch.

	* Corrected a problem in local messages (from plsymtab.c and
	friends): if a detail message refers to a location in an include
	file, the line given is the line in the include file, but the file
	name given is the top file.  This is confusing.  Rewrote to report
	the include file name and trace-back to where included in top file.
	This required keeping a list of all include files.  The list gives
	the include file name and the line number in the top file where it
	is included.  A reference to the entry in this list is stored in
	the local symbol table for each defined, set, and used location.

	This fix is incomplete.  The messages without details (e.g. mixed
	common) give the include file name but do not give the traceback.
	(Maybe they don't need to.)  Also, check_loose_ends should be
	rewritten to use the local-message routines and (maybe) to provide
	the same traceback.

2000-07-03  Robert Moniot  <moniot@galileo>

	* Made a few changes to some .opt files in test directory to use
	various flavors of options, e.g. --option and -no-opt.  Also
	included a -novice flag in one Makefile target so that any
	breakage such as occurred on 2000-06-01 will be detected in future.

	* Bug fix: the improvement of 2000-06-01 introduced a bug that
	caused -novice not to be recognized.  Bug is now fixed.

2000-06-20  Robert Moniot  <moniot@galileo>

	* Current edition released as version 2.12.1.

	* Meanwhile, work is proceeding on the new version, 3.alpha.  Heba
	Elsayed has written new code in labels.c to store information
	about statement labels and to print warnings and error messages
	about misuse of labels.

2000-06-01  Robert Moniot  <moniot@galileo>

	* Improved set_option to allow either "-" or "--" prefixes on
	options.  As a side effect, rc file can now either have "-" on
	options or not.

	* In response to mounting evidence that novice programmers don't
	know what a "parse error" is, added a minor improvement to
	message.c such that if the front end of the message string is
	"parse error", then it prints an explanation of what that means
	(only once per run).  Also defined YYERROR_VERBOSE in ftnchek.h,
	so that parser will give "expecting <token>" information with
	"parse error" messages.  Since the token names defined by the
	parser are the internal ones (e.g. tok_DO and EOS) I added a step
	in the Makefile so that the names are improved by removing the
	"tok_" prefix, changing other underscores to blanks, and changing
	"EOS" to "end of statement".

2000-05-27  Robert Moniot  <moniot@galileo>

	* A user, Laurent Walle <walle@gaulois.cad.cea.fr>, pointed out
	that -calltree=help seems to contradict the fact that the default
	format is "tree" by saying that the default is "none".  This is a
	confusion between default value of an option and turn-on value of
	the option.  I have documented turn-on values for all these
	options in the man page, and added printing of the turn-on value
	when -option=help is given.

2000-05-10  Robert Moniot  <moniot@galileo>

	* Fixed buglet: used-before-set warning said "X set" even if X is
	just passed as a subroutine argument.  Now says "X may be set"
	if assigned_flag is 0.  Added an associated program primes.f to
	the test suite.

2000-04-08  Robert Moniot  <moniot@galileo>

	* Released version 2.12.0.

2000-04-05  Robert Moniot  <moniot@galileo>

	* VMS version: I have renamed build.com to build-vax.com since
	Alpha is by now the most likely.  The former build-alpha.com is
	now named build.com.  Also, the only difference between link.com
	and link-alpha.com was in the addition of VAXC/OPT to the object
	list.  So I moved this into build-vax.com and made link-alpha.com
	be the sole link.com file.  I have changed /STANDARD=VAXC to
	/STANDARD=RELAXED_ANSI89 in build.com, except for compiling
	shell_mung.c.  Although most of the code compiles Ok with
	/STANDARD=ANSI89, this choice does not pre-define the macro VMS,
	and it also fails to provide the toascii() function needed by
	forlex.c.  Likewise I removed the /VAXC option from all except
	shell_mung.c in build-vax.com.

	* VMS version: added exit with error status codes on control-Y and
	warning to CC.COM and LINK.COM.  The help page on EXIT says that
	even error codes raise warning and error status in the callers,
	while odd error codes do not, so error code 2 is used.
	
2000-03-29  Robert Moniot  <moniot@galileo>

	* Added a new target checkexpert to test/Makefile.  It runs all
	the same checks as checklistings, but adding the -nonovice flag,
	so that the alternate output format will now get a fairly thorough
	test.  The output files are named *.fcx. (Of course, now I have to
	fix up check.com and check.bat to match.)

	* Gunnar Duus (gunnar.duus@dlr.de) has provided a set of batch
	files for running the regression tests under MS-DOS.  I wrote a
	small replacement program for cmp so that users do not need to
	have the GNU version.  All of this will be included in the test
	directory in a zip file checkbat.zip to avoid clutter.

2000-03-17  Robert Moniot  <moniot@galileo>

	* Applied Stephan Wefing's suggestion to put declared-but-not
	used warnings for arguments under a separate command-line option
	-usage=arg-unused.  It would be better to have the warning
	controlled by special comments like C$FTNCHEK X UNUSED but that
	would be too much work right now.

2000-03-13  Robert Moniot  <moniot@galileo>

	* Bob Wells (wells@atm.ox.ac.uk) has provided a DCL script,
	CHECK.COM, that runs the regression tests under VMS (except for
	help and include).  I have to remember to keep this up-to-date as
	test/Makefile changes.

	* A bug in the man-to-html conversion showed up with the new
	option -identifier-chars, containing a hyphen.  The rman program
	gives the section anchor for this option the attribute
	NAME="identifier".  This seems to be a bug in rman, since in links
	elsewhere it uses HREF="#identifier-chars" to refer to this
	anchor.  The fix for now is to have the patch step replace the
	anchor attribute by NAME="identifier-chars"

2000-03-10  Robert Moniot  <moniot@galileo>

	* Changed generic-config target to make generic versions of all
	the files that regular configure does.

	* Bob Wells (wells@atm.ox.ac.uk) provided a dcl2inc-vms.awk script
	for VMS, where the "subterfuge" for nawk fails to work.  I do not
	want to maintain two independent versions of dcl2inc.awk, so I
	made this script configurable, with the redirect using ``>
	"/dev/stderr"'' if the system has gawk, and ``| "cat 1>&2"''
	otherwise.  The generic-config script makes the substitution that
	corresponds to gawk, and this will work for VMS and any other
	system with gawk.

	* Changed configure script to test for unistd.h, so that ftnchek
	can read it if it exists, rather than declaring unlink itself.
	Some compiler complained about this.

	* The version as of 2000-03-09 is 2.12.alpha3 and made available
	to alpha testers.

2000-03-08  Robert Moniot  <moniot@galileo>

	* Added a blank line between warning blocks (i.e. groups of lines
	initiated "Warning" from local_err_head and cmp_error_head),
	suppressed by -quiet.

2000-03-01  Robert Moniot  <moniot@galileo>

	* Added new command-line flag -brief to control whether the error
	messages about local variables (from print_loc_syms phase) are in
	verbose form (default) or brief.  The verbose form lists the line
	at which each variable is declared, used, or set (according to the
	nature of the error respectively).  The brief form is about the
	same as the old form, which simply lists the offenders by name.

	* Moved typespec routine out of symutils.c into symtab.c, so that
	symutils.c and symutils.h are empty and retired from the suite.
	Unfortunately typespec cannot go into message.c where it logically
	belongs, because it makes use of the type_name[] array in symtab.h.

	* Created new files, options.c and options.h, containing the
	routines and structs for managing command-line options, which are
	moved out of ftnchek.c.  So ftnchek.c now has only the main
	arg-processing loop and management of reading files plus wrapup.

2000-02-22  Robert Moniot  <moniot@galileo>

	* Created a new routine in plsymtab.c named choose_tag, whose
	purpose is to be given an element of an Lsymtab list, plus a tag
	type distinguishing defined, set, and used, and to choose a tag
	saying "declared", "first occurrence", "set", etc., as well as the
	correct line number.  It is used in several places, and while it
	provides uniformity in the tags, it risks doing the wrong thing
	sometimes.  Here are the main criteria it uses:
	  1. For TAG_USED choose "used" and line_used.
	  2. For TAG_SET choose "set" and line_set.
	  3. For TAG_DEFN choice depends on storage class.
	     a) variable:
	       i. if type is type_UNDECL, choose "first occurrence" and
		  line_declared, except for dummy argument or the name of
		  the current module (which appears as a variable if a
		  function), which use rule ii.
	       ii.otherwise choose "declared" and line_declared.
	     b) common block: choose "declared" and line_declared.
	     c) subprogram (including stmt function): choose "defined" and
	        line_declared (unless line_declared is undefined [which
	        never happens for stmt functions, but always happens to
	        external subprograms not declared e.g. in EXTERNAL or
	        type stmt]) in which case fall back to referenced" and
	        line_used.

2000-02-14  Robert Moniot  <moniot@galileo>

	* Split plsymtab.c into three: prlocsym.c has print_loc_symbols,
	loccheck.c has local error-checking routines like find_sixclashes,
	and plsymtab.c has routines used by both.  Moved sort_lsymbols and
	sort_positions back into plsymtab.c, and sort_gsymbols into
	pgsymtab.c.  The file symutils.c now has only typespec and
	longtostr functions, which are usable by both local and global
	routines (although of the two, only longtostr is actually used by
	local routines at this time).

2000-02-09  Robert Moniot  <moniot@galileo>

	* Split out the symbol-sorting routines sort_symbols (renamed
	sort_lsymbols), sort_positions (renamed sort_parameters) and
	sort_gsymbols into a separate file symutils.c with prototypes in
	symutils.h.  Since now plsymtab.h contains only the prototype of
	make_declarations, it has been renamed makedcls.h.  So at the
	moment plsymtab.h is not used by anything.

2000-02-09  Robert Moniot  <moniot@galileo>

	* Removed the "at line n file foo.f" from pgsymtab warning headers
	referring to mismatches in -novice mode.  When there is a
	mismatch, the warning applies to two different places, and so it
	seems strange if the header refers to just one of them.  No change
	was made to -nonovice mode since it is useful to have the header
	have the same line and file information as the first detail, for
	use with next-error command of a smart editor.

2000-01-28  Robert Moniot  <moniot@galileo>

	* Added new fields to Lsymtab struct:
	   LINENO_t line_declared, line_set, line_used;
	These contain the line numbers where the item was declared, first
	set, and first used respectively.  For variables that are not
	explicitly declared, line_declared is where the variable first
	appears.  But for subprograms, line_declared is where the FUNCTION
	or SUBPROGRAM statement defining it is, and is not set to a valid
	line number if the subprogram is not defined.  All three of these
	line numbers are initialized to NO_LINE_NUM.  If a variable is
	equivalenced, line_set and line_used are set to the point where it
	or its equivalenced partner is set or used, but line_declared is
	only set to where the variable is declared by its own name.

2000-01-27  Robert Moniot  <moniot@galileo>

	* Split plsymtab.c into two files: plsymtab.c now contains only
	contains print_loc_symbols and associated routines, and new file
	makedcls.c contains make_declarations and associated routines.

2000-01-26  Robert Moniot  <moniot@galileo>

	* Split pgsymtab.c into four files: pgsymtab.c now contains only
	the error-message routines *cmp_err_head, *error_report, and the
	two convenience routines typespec and longtostr.  The arg-mismatch
	reporting routines are now in argcheck.c, com-mismatch routines
	are in comcheck.c, and the xref and calltree routines are in
	crossref.c.  A new header file pgsymtab.h contains shared
	declarations.

	These error-reporting routines now use the same mechanism as the
	in-place error messages: they use two new routines called
	global_warning and global_message, with msg_tail for followups.
	The global_warning routine prints the word "Warning" along with
	location information.  The global_message routine is the same
	except it doesn't print any tag.

	This new version is called 2.12.alpha2.

2000-01-24  Robert Moniot  <moniot@galileo>

	* Split ftnchek.c into two files: the new file is named message.c
	and contains all the error-printing routines: syntax_error,
	warning, nonportable etc.

2000-01-20  Robert Moniot  <moniot@galileo>

	* Explored the possibility of having pgsymtab.c routine
	cmp_error_head call error_message in ftnchek.c (via a new
	interface named global_message).  The advantage would be more
	uniformity in formatting of warnings and support for wrapping of
	error messages.  However, if it is desired to leave off all tags
	such as "Warning" then the novice-style error messages look bad
	since they need the tag to introduce their "at line etc."  Maybe
	this will be OK if "Warning" is acceptable as a tag.  (But the
	error_report routines will not be able to use error_message
	since they definitely do not want tags or, in novice mode, any
	file and line information.)

2000-01-17  Robert Moniot  <moniot@galileo>

	* Changed format of warnings in pgsymtab.c a little, restoring the
	"at location n" form of identification of arguments and common
	variables.  The other format, as inline "arg n: NAME", is still
	available if the macro INLINE_ARGNUM is defined.

	* Made numerous minor changes to reduce the number of warnings
	from picky compilers: mainly to do with signed-unsigned
	comparisons.

1999-12-29  Robert Moniot  <moniot@galileo>

	* New setting:  -identifier=list  where list is a string of
	non-alphanumeric chars that may be used in identifiers.  All
	such characters other than '_' are treated as if they were '$'
	for purposes of warnings and implicit typing.

1999-12-25  Robert Moniot  <moniot@galileo>

	* Added syntax error message "item not assignable" for attempt to
	READ or ACCEPT a non-lvalue.  This error message had been limited
	to assignment statements and DO indices.  Added to all cases an
	explanation "it is a constant" when the item in question is a
	parameter, since in that case it is not obvious locally why the
	item is not an lvalue.

1999-12-24  Robert Moniot  <moniot@galileo>

	* Finished making the changeover to new format of warnings in
	pgsymtab.c, for both subprogram argument and common block variable
	mismatches.  Analogous changes were made for common error
	reporting as described below for args: new routines
	novice_com_error_locate, expert_com_error_locate, and
	com_error_report.  The cmp_error_head routine has been modified to
	work for subprog and common block warnings.  It and the report
	routines and use variable arguments to allow varying information
	in the messages.  The variable arg protocol is implemented only
	using ANSI C, so it will no longer compile under pre-ANSI C.

	* Added a new helpful message, "Possible intended function
	declaration is not first line of module", for novices.  Some
	students this semester got confused and placed their FUNCTION
	statements after other statements.  If not placed first, a typed
	FUNCTION declaration appears to be a dynamic array declaration
	(size is a variable and array is not dummy).  The new message
	appears if a putative dynamic array is seen whose name begins with
	the word FUNCTION, and is not in a DIMENSION or COMMON statement.
	Only issued in -novice mode.

1999-11-22  Robert Moniot  <moniot@galileo>

	* Re-designed the expert (-nonovice) form of warnings in
	pgsymtab.c.  So far only the output of arg_array_cmp is in the new
	style.  The new style puts the file name and line number at the
	left side so emacs compile-mode and similar tools can recognize
	these as error messages.  The change was accompanied by lesser
	changes in the novice style, mainly removing the arg position
	references of the form "at position n" and replacing them by "arg
	n: NAME" in the text of the error messages.  In the process, I
	invented a new routine, arg_error_report, which produces the
	report line for one argument.  It shortens the error-reporting
	code considerably where it is used.  This routine can only handle
	fixed warning messages (like "is modified") at the present time,
	but it should not be hard to extend it to use a variable argument
	list to print more complex messages.  Doing this would either mean
	committing to ANSI C by implementing only the stdarg.h form, or
	else doing extra work by implementing an alternative based on
	varargs.h.

1999-11-01  Robert K. Moniot  <moniot@galileo>

	* Withdrew the -filter option introduced 1999-10-12.  This was
	partly motivated by adverse shakedown reports for OSF and IRIX,
	but also by the recognition that the -filter option is not the
	Right Way to do the preprocessing.  One bug that seems hard to fix
	is that if the user specifies cpp rather than ftnpp as the filter,
	then the (f90 style) INCLUDE files are processed separately from
	their parent/children.  The cpp program puts a ``# 1 "name.h" at
	the start, but no # line at the end, which confuses ftnchek.

	So now ftnpp is freestanding.  The idea is to use a pipeline
	``ftnpp options file.f | ftnchek''.  The advantage over cpp is
	that replacements and conditional compilation extend into INCLUDE
	files.  (The kluge to ignore filenames of "" in the preprocessor
	output is still needed.)  The main disadvantage of not having a
	-filter option is that it would allow multiple original source
	files on a command line to be preprocessed and checked.  The
	piping scheme requires each file to be checked separately.  (It
	would be easy to change ftnpp to read multiple input files; this
	was the original synopsis, but it was changed to match cpp.)
	Alternatively each file could be preprocessed and placed into a
	temporary file, and then the temporary files checked.

	Note on OSF: there is a filter /lib/fpp which is invoked by f77 on
	files with extension .F, but it cannot be used in place of cpp
	since it does not allow input from stdin.  It seems to behave the
	same as cpp otherwise anyhow.

	Note in general: none of the compilers AIX/xlf, OSF/f77, OSF/f90,
	or Linux/g77 preprocess inside INCLUDE files.  I asked Tobias
	Buchal <buch@ifh.bau-verm.uni-karlsruhe.de>, who originally
	suggested the -filter option for this reason, what compiler does
	so, but I haven't heard back.

1999-10-20  Robert K. Moniot  <moniot@galileo>

	* Made the current version 2.11.2.  Patch 1 is considered to be
	the minor fix to fortran.y of 1999-10-03, but 2.11.1 was never
	made into a distribution release.

	* Fixed a bug in Makefile install-man-sgi target where the chmod
	command did not act on same path as the cp command.  Evidently
	this target doesn't get much use these days.

	* Added ftnpp.c and ftnpp.man to the distribution, with suitable
	actions in make install and uninstall targets.

1999-10-12  Robert K. Moniot  <moniot@galileo>

	* Against my better judgment, I have (experimentally, so far)
	added a -filter option: -filter=command specifies that each source
	file is passed thru the command.  For flexibility, the command can
	have %s's which are substituted by the source file name and %I's
	which are substituted by -Iinclude flags reflecting any
	-include=path options given.  The motivation for doing this rather
	than relying on ``cpp file.f | ftnchek'' (leaving only the
	interpretation of # line directives to be done) is that f90
	INCLUDE files are not passed thru the preprocessor.  With the
	-filter option, INCLUDE files are passed thru the command as well.
	Originally the default command was /lib/cpp but this had the
	defect that #define lines in a file would have no effect in
	INCLUDE files, and vice-versa, since a separate filter is started
	for each file.  The only fix is to use a fortran-aware
	preprocessor that reads files and includes their INCLUDE
	files, then passes the whole to cpp for further preprocessing.  So
	I wrote such a thing, named ftnpp, using routines
	append_include_path, find_include, and fopen_with_path from
	ftnchek almost unaltered.  Then I noticed that when the
	output of ftnpp is fed to cpp's stdin, cpp puts a line ``# 1 ""''
	at the top, confusing ftnchek into thinking that the input is all
	included from a file whose name is the empty string.  The fix
	for this required that ftnchek ignore # line directives having the
	empty string as the file name (at least at line 1).  But cpp also
	puts the empty string into # line directives after inclusion of
	#include files, so it is necessary to have ftnpp process #include
	files as well as INCLUDE files.  Then, to allow -Ddefines etc
	on the command line, ftnpp passes all its non-file arguments to
	cpp.  It passes -Iincludes but these should not have any use
	unless #include <file> is used (ftnpp only does #include "file"
	lines).

1999-10-03 Robert K. Moniot  <moniot@galileo>

	* Fixed bug reported by Bob Wells <wells@atm.ox.ac.uk>.  The code
	in fortran.y for else_if_stmt had $4 instead of $5 for expression
	inside IF, so any variables in that expr were not getting updated.
	This bug came in when tok_ELSEIF was retired in favor of tok_ELSE
	tok_IF during addition of construct names to grammar.  While
	fixing this I noticed and fixed a much older bug in
	arithmetic_if_stmt code, which used token class instead of
	TOK_type to check data type.  This latter bug suppressed warnings
	of non-arithmetic types inside arithmetic IF.

	* The version as of 1999-08-24 has been released as 2.11.0.

1999-08-23  Robert K. Moniot  <moniot@galileo>

	* Shortened some variables so that they are less than 31
	characters in length.  VMS C compiler gives informational warnings
	about such long identifiers.

	* Fixed bug (missing THEN) in build.com and build-alpha.com.
	Placed them, and also cc.com, link.com, link-alpha.com, and
	ftnchek.com, under RCS.  (Note: ftnchek.com is not distributed.)

1999-08-21  Robert K. Moniot  <moniot@galileo>

	* Changed the way default -source options are handled, since
	-source=all is unlikely to be anybody's choice and the vms-include
	option is desirable for VMS version.  So now each -source option
	has its own macro, as before.  Unfortunately there is no simple
	way to make the -help option print the correct default anymore.
	(Most options just have #ifdef OPTION_NAME_ALL "all" #else "none"
	#endif) Rather than write a lengthy tangle of #if's that are
	unlikely ever to be used, I just have it choose between "vms" and
	"none" depending on whether VMS_INCLUDE is defined.

	* Added new flag, -source=dec-parameter-standard-type to allow the
	nonstandard DEC parameters (discussed at 1999-08-17) to take their
	data type in standard fashion, in case there are compilers out
	there that treat them this way.

1999-08-20  Robert K. Moniot  <moniot@galileo>

	* In consequence of a question posted to comp.lang.fortran, I
	noticed a bug that has been in ftnchek since the change in keyword
	recognition in forlex.c (at least as early as version 2.9).  Here
	is the behavior: When a main program follows a subprogram and
	starts off with assignment statements or statement function
	definitions, each statement, up to the first statement that is not
	one of these, is treated as a separate main program, causing a
	bogus warning "Subprogram %MAIN multiply defined".  Here is the
	cause: the curr_stmt_class variable was being set only in
	is_keyword().  For statements beginning with a keyword, it is set
	to the token for the keyword.  For assignment statements and
	stmt-funs (not distinguished in parsing), is_keyword() sets it to
	tok_identifier.  The bug was introduced when forlex.c was improved
	to invoke is_keyword() only if a token matches a keyword.  If not,
	then curr_stmt_class would retain its value from the previous
	statement.  In particular, it would remain at tok_END in the case
	mentioned, causing END_processing to be invoked for the statement.
	Here is the fix: set curr_stmt_class to tok_identifier (when
	initial_flag is true) in get_identifier(), prior to entering the
	code where is_keyword() may be invoked.

1999-08-17  Robert K. Moniot  <moniot@galileo>

	* Fixed erroneous handling of DEC-style parenthesis-less PARAMETER
	statements.  According to Richard Maine on comp.lang.fortran 11
	Jul 1999:
	
	  Not only is the syntax different from the standard form of the
	  parameter statement, the semantics is also different.  Based on
	  my observation, I'd say that an awful lot of the VAX users are
	  not actually aware of what this statement really means.  I sure
	  recall helping a lot of users who complained that "this code
	  worked fine on a VAX", when in fact the code in question did not
	  work on a VAX.  Turns out they meant that code *like* this
	  worked fine on the VAX, and they failed to understand the reason
	  that the code claimed to be simillar was actually different.

	  On a VAX, the form without the parens gets its type differently
	  than the form with the parens.  The type is determined *SOLELY*
	  by the form of the expression.  Implicit rules are ignored.  And
	  I think its even an error to try to give it an explicit type,
	  though I'm not sure about that part.  Thus, for example, given
	  the usual implicit rules amd no other declarations PARAMETER X =
	  3 and PARAMETER (X=3) have different types.  The standard form
	  gets its type (real) implicitly from the name X.  The
	  nonstandard form gets its type (integer) from the form of the
	  expression 3.

	He also says:
	  DEC themselves (back when they were still DEC) explicitly
	  recommends (in their manual) against using the form.  Its there
	  purely because it was their in an early release and they kept it
	  for compatability with code based on that early release.

	Details: If the parameter is explicitly typed, then the explicit
	declaration takes precedence.  The -source=parameter-implicit-type
	option now only matters for the standard form of PARAMETER
	statement.

	* Added protections in symtab.c to prevent EXTERNAL declaration of
	subprogram entry point from causing corruption of symbol tables.

1999-08-02  Robert K. Moniot  <moniot@galileo>

	* Added documentation of -usage=arg-*alias* options.

	* Added arg-alias.f and common-alias.f to LISTOUT set in
	test/Makefile.in.

1999-08-01  Robert K. Moniot  <moniot@galileo>

	* Fixed the bug described in following paragraph.  Also noticed
	and fixed another bug, namely that process_lists did not OR the
	local symt->invoked_as_func into gsymt->invoked_as_func, so this
	flag was always 0 in project file.  This bug was harmless since
	the global invoked_as_func is presently unused.

	* Discovered a fairly minor bug in project file creation routine:
	the project file contents vary depending on whether the project
	file was created in an ftnchek run that included multiple source
	files vs. just one at a time.  If multiple files were used, then
	it depends also on the position of the source file in the list.
	The reason: since information about externals is taken from the
	global symbol table, which accumulates information as ftnchek
	runs, the lines starting with "external" can vary depending on
	what ftnchek has seen about the external up to that point.  In
	particular, the "type" field can be 0 if the external was named in
	a CALL or EXTERNAL statement but not otherwise seen, whereas it
	will be the actual type if the external definition had been
	processed by that time.  Also the flags will vary depending on the
	history of the external up to that point.  This bug is "fairly
	minor" since the information that can vary is not used directly in
	cross-checking: the type field that is used for checking is in the
	actual call, defined on project lines starting with "module".
	Usage of routines is checked thru the call tree, not the Gsymtab
	usage flags.  Here is one way this bug can be made manifest:
	suppose that foo.f contains a call to BAR defined in bar.f.
	  --  Run   ftnchek -project foo.f bar.f
	  --  Run   ftnchek bar.f
	  --  Run   ftnchek bar.prj
	This creates bar.prj with used_flag=1.  The last two differ since
	the latter includes the warning "Subprogram BAR never invoked".
	This comes about because its used_flag is set in bar.prj (making
	num_defns != 0) yet it is unvisited.  I don't know if there are
	more serious checking errors that can occur.  To fix this, it
	seems Gsymtab should have a separate set of flags like
	used_flag_this_file which are reset when starting a new source
	file, set along with the other flags, and printed instead of the
	other flags by proj_file_out.

1999-07-26  Robert K. Moniot  <moniot@galileo>

	* I have started a documentation project to describe the
	project-file format.  Some users have asked for such docs so they
	can write perl scripts using project files for various purposes.

	* New project file format P3 implemented to support the new checks
	for aliasing of subprogram arguments to each other and to common.
	Basically just needs three new items on the line for each arg,
	printing common block name, common block index, and same_as index.

1999-07-25  Robert K. Moniot  <moniot@galileo>

	* Added new numeric setting: -errors=num  sets the limit on the
	number of error messages in a "cascade", formerly fixed at 3.  A
	value of 0 means no limit.  Default is still 3.

1999-07-24  Robert K. Moniot  <moniot@galileo>

	* Added new check: subprogram arguments aliased to common
	variables in the same module.  This is also prohibited by standard
	section 15.9.3.6.  This check introduces new fields into
	ArgListElement struct: struct gSymtEntry *common_block pointing to
	the block that an actual argument belongs to if any, and long
	common_index which gives its position in block (counting from 1 to
	n).  Also two new fields in Lsymtab struct: struct gSymtEntry
	*common_block and long common_index, which hold the same
	information for all variables for use when arglists are made.  The
	two new command line options are:
	   -usage=arg-common-alias,arg-common-array-alias
	Note: this requires a change in the project file format, which is
	not yet done.

1999-07-16  Robert K. Moniot  <moniot@galileo>

	* Added new check: subprogram arguments aliased to each other,
	when one of them is modified: standard section 15.9.3.6.  This
	check introduces a new field into ArgListElement struct: short
	arg_same_as, which holds index of an argument that resolves to the
	same thing (after equivalencing is followed).  (This applies only
	to calls.  In defns, the arg_same_as field is always set to the
	index of each arg.)  Then in the usage checks in pgsymtab, a test
	is added for whether the dummy argument is modified while the
	actual arg_same_as is not equal to the argument's own index.
	Treatment of scalars and array variables are controlled by
	separate flags, since a construction like CALL SWAP(A(I),A(J)) is
	likely to be OK, so one wants to be able to turn off such warnings
	without turning off the warning on CALL SWAP(X,Y) where X and Y
	are equivalenced.  The two new command-line options are:
	   -usage=arg-alias-modified,arg-array-alias-modified
	Note: this requires a change in the project file format.  Work on
	that is deferred till the check for common-variable aliasing is
	done.

1999-07-11  Robert K. Moniot  <moniot@galileo>

	* Change -calltree option from numeric setting to optionlist form.
	The new options are: program-order, reference, repeat, tree, vcg.
	The old numeric setting is grandfathered.  A mutual-exclusion
	check is implemented to prevent any two of reference, tree, or vcg
	being true at once: the last specified over-rides the others.
	Using -calltree alone is equivalent to tree, not all.

1999-07-09  Robert K. Moniot  <moniot@galileo>

	* Changed -common option from numeric setting to warnlist form.
	The new options are type, length, dimensions, exact, and
	volatile.  The volatile option replaces -volatile, which however
	is retained for backward compatibility.  The numeric setting is
	still accepted, with >=1 => type, >=2 => length, 3 =>
	dimensions,exact.  Note: unlike all other warnlist options, not
	all the options default to the same value: volatile defaults to
	FALSE, while the rest default to TRUE.

1999-07-03  Robert K. Moniot  <moniot@galileo>

	* Changed -array option from numeric setting to warnlist form.
	The new options are dimensions, size.  The numeric setting is
	still accepted, with 1 => dimensions and 2 => size.

	* Changed -arguments option from numeric setting to warnlist form.
	The new options are: arg-arrayness, arg-type, function-type,
	number.  The numeric setting is still accepted, with 1 => number
	and 2 => all others.

1999-06-27  Robert K. Moniot  <moniot@galileo>

	* Changed -makedcls option over from a numeric setting to an
	option-list string.  As usual, the numeric setting is
	grandfathered.  The new options and their numeric equivalents are:
	  asterisk-comment (128)
	  comment-char-lowercase (256)
	  compact (4)
	  declarations (1)
	  exclude-sftran3 (64)
	  keywords-lowercase (16)
	  suppress-array-dimensions (512)
	  undeclared-only (2)
	  use-continuation-lines (8)
	  vars-and-consts-lowercase (32)

	* Fixed bug in taking of include files: previously they were
	searched for relative to the working directory of the ftnchek
	command, instead of relative to the directory of the source file
	containing the INCLUDE line.  The new behavior is: 1) if the
	include spec is an absolute path, then it is looked for as given,
	and nowhere else; 2) if not absolute, then if the source filename
	has a path prepended, the same path is prepended to the include
	spec before searching for it; 3) if step 2 fails, then the include
	spec is looked for in the include directories given by the
	-include setting.
	Still to do: try to find how to do it right for VMS and MSDOS, and
	how to do it at all for Mac OS.

1999-05-30  Robert K. Moniot  <moniot@galileo>

	* Added checking for embedded space in multi-char punctuation
	operators: ** // <= >= == /=.  This is controlled by existing
	flag -pretty=embedded-space.

1999-04-11  Robert K. Moniot  <moniot@galileo>

	* Unbundled shell_mung.c from the distribution, due to a license
	conflict pointed out by a Debian developer, Mark Brown
	<broonie@tardis.ed.ac.uk>.  It seems that the GPL does not permit
	linking with code that places more restrictions than it does, and
	my code contains a restriction on mentions of the software in
	advertising.  The solution is to make VMS users get shell_mung.c
	separately.  I have fixed BUILD.COM and BUILD-ALPHA.COM so that
	they look for shell_mung.c and work around its absence.  I should
	provide good documentation for where to get it.

1999-04-04  Robert K. Moniot  <moniot@galileo>

	* Added if-construct-names to the grammar:
		[construct-name :] IF ...
		ELSE IF( ... ) THEN [construct-name]
		ELSE [construct-name]
		END IF [construct-name]
	The changes to flags in keywords.h render tok_ELSEIF moot, since
	ELSE no longer has the NA (no following alphabetic) flag.  So ELSE
	IF always comes out as tok_ELSE tok_IF.  The warnings are
	controlled by the same flag -f77=construct-name as for DO-constructs.
	
1999-03-15  Robert K. Moniot  <moniot@galileo>

	* Added do-construct-names to the grammar:
		[construct-name :] DO ...
		CYCLE [construct-name]
		EXIT [construct-name]
		END DO [construct-name]
	The recognition of the named DO was handled using a variable
	shared between parser and lexer to flag when a construct-name has
	been seen, so lexing of normal DO was not affected.  However, the
	other changes necessitated removing the NA (not followed by
	alphabetic) flags on CYCLE, EXIT, and ENDDO keywords, so possibly
	some new parse bugs were introduced.  Passes simple tests, at
	least.  New flag -f77=construct-name controls warnings.	

	The construct-name is parsed as tok_identifier | tok_array_identifier
	which is not made into an id expr.  So construct-names can
	coincide with identifer names without confusion.
	
	* Added recognition of the Fortran 90 relational operators < <= ==
	/= > >= .  New flag -f77=relops to control warnings.

1999-02-28  Robert K. Moniot  <moniot@galileo>

	* Fixed bug in forlex.c: the handling of #line directives did not
	properly update top_filename and top_file_line_num.  The fix uses
	a small stack to track the pushing and popping of original
	#include files (the #line directives represent the result of
	inclusion of these; there is no inclusion being done by ftnchek:
	the stack just enables ftnchek to follow what was done).  When the
	popping reaches the outermost level, the top_filename pointer is
	restored so that pointer comparison can be used in place of
	strcmp.  Therefore the bugfix of project.c on 1999-01-31 is
	retracted.

1999-01-31  Robert K. Moniot  <moniot@galileo>

	* Fixed bug in project.c: the test for whether a definition is
	local was based solely on string pointer comparison.  This can
	fail when #line directives have been making the filename change.
	As a result, some modules or common blocks could be omitted from
	the project file when they should be included.  The test was
	changed so that if a pointer mismatch occurs, it does a strcmp.
	This should continue to use the fast pointer match in most cases.

1999-01-27  Robert K. Moniot  <moniot@galileo>

	* Changed over -source flag from numeric to command-list form.
	The old numeric form is still accepted.  The correspondence is
	  1 => dec-tab
	  2 => vms-include
	  4 => unix-backslash
	  8 => parameter-implicit-type

1999-01-24  Robert K. Moniot  <moniot@galileo>

	* In crossref listing, added "(main program)" explanation to "not
	called" message for main programs.

	* Fixed the listing of common block references generated by
	-crossref, so that the blocks are listed in alphabetical order.
	Previously the modules referencing each block were sorted, but the
	blocks themselves were printed in the order of occurrence in
	global symbol table.

	* Added yet more Fortran-90 I/O keywords.  These are used by READ
	and WRITE.
	   ADVANCE EOR SIZE

1999-01-11  Robert K. Moniot  <moniot@galileo>

	* Fixed (I hope) the install-man-sgi target.  According to
	information from Guido Germano <germano@bristol.ac.uk>, it is now
	many years that SGI has been using $mandir/manl like everybody
	else.  Apparently man pages are still preformatted and packed.
	Since it is hard to know at what IRIX version the changeover
	occurred, I altered the configure script so that it sets a
	variable sgimansubdir to "/manl" or "/man1" if such a subdirectory
	of $mandir exists.  Then the Makefile puts the .z files into
	$(mandir)$(sgimansubdir). [Note: checking the directories involved
	some fancy footwork to get the effective value of $mandir in the
	configure script.  There doesn't seem to be a standard AC macro to
	check for the existence of a subdirectory of $prefix.  I hope the
	result is portable.]

1999-01-10  Robert K. Moniot  <moniot@galileo>

	* Added recognition of the following Fortran-90 I/O keywords:
	   ACTION DELIM PAD POSITION READ READWRITE WRITE 
	and the following IBM/MVS I/O keyword:
	   NUM
	
	Definitions of these, ready for iokeywds.h, were kindly provided
	by Jean-Pierre Rouits <Jean-Pierre.Rouits@der.edf.fr>.  However,
	adding the F90 keywords means that it is no longer the case that
	all nonstandard I/O keywords are VMS-isms and hence non-f90.  So
	new flag bits were added to the io_keyword struct to distinguish
	non-f77 and non-f90 cases.  New warning options were defined:
	-f77=io-keywords and -f90=io-keywords to warn about non-f77 and
	non-f90 I/O keywords respectively.  The old flags -f77=vms-io and
	-f90=vms-io are retained for compatibility, but their meanings are
	now identical to the new flags.  Behavior on any program that did
	not use the new keywords should be the same as before.
	
	* Placed test/Makefile.in and Compare.sh.in under RCS version
	control.  To avoid the RCS files going into the tar archive, they
	are placed in subdirectory test of the main RCS directory.  Hence,
	from within the test directory, use "co ../RCS/test/Makefile.in,v"
	and so forth.

	* Added support for CYCLE and EXIT statements.  The syntax in
	fortran.y does not support the optional do-construct-name.  The
	f77 warning is controlled by flag -f77=cycle-exit.

1998-09-30  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Fixed bugs reported by Furio Ercolessi in Makefile: the rules
	for making dcl2inc.cat and ftnchek.cat both ended with "fi ; \"
	which should have been "fi".  The result was that the blank line
	following the rule for dcl2inc.cat got gobbled up, and Irix make
	then took the following ftnchek.cat target as more of the rules.
	Also, $(lispdir) was not quoted in the test for its existence, so
	if it did not exist the test would have a syntax error.

1998-09-27  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* In Makefile.in: changed initial blank spaces to tabs on a few
	lines.  These could cause some make's to have trouble.

	* Added the following files to RCS: config.h.in make_html.sh
	add_html_refs.sh ftnchek.man configure.in.  Marked the current RCS
	release as being in state "Rel" by giving the command:
		rcs -sRel RCS/*
	Also, assigned the symbolic name V2_10_1 to the current release
	by giving the command:
		rcs -nV2_10_1: RCS/*
	
1998-09-23  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added Makefile.in to RCS.  Then modified it to add htmlclean as
	a target which is made by distclean.  This will wipe out any junk
	in the html directory.  (Release 2.10.1 was distributed with a *~
	file in the html directory [blush].)

1998-09-10  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Started RCS version control.  Did this by creating directory RCS
	in the source directory and running ``ci -l'' on the files:

	  exprtype.c  ftnchek.c   iokeywds.h  plsymtab.c  symtab.h
	  forlex.c    ftnchek.h   keywords.h  project.c
	  fortran.y   intrins.h   pgsymtab.c  symtab.c

	The version for each of these files defaulted to 1.1.  (I will not
	try to keep file version numbers in sync with program version
	number.)  The same was done for Michael McCarthy's copy of
	2.10.1.  He is embarking on the implementation of statement label
	checking.  Hopefully RCS will let us merge these at a later date.
	
	* Prepared release 2.10.1.

1998-08-25  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Following bug report from Olov Einarsson
	<olov.einarsson@senet.abb.se>, made the following changes:

	1. Bug fix: commented out code setting symt->parameter = TRUE in
	   situations where "must be a parameter" error message is issued.
	   This caused pointer violation when -makedcls used on files
	   generating this error message.

	2. Added tolerance for unparenthesized PARAMETER statements
	   interspersed with DATA statements.  The unparen kind are
	   disambiguated from assignment statements by their position
	   among spec statements.  By the standard, DATA statements must
	   follow spec statements, but many compilers allow them there.
	   So I changed the criterion from stmt_sequence_no > STMT_SPECIF
	   to STMT_STMT_FUN.  Since variables named PARAMETERsomething are
	   rare to begin with, this heuristic will still seldom be wrong.
	   In fact, it might be wise to identify any assignment statement
	   anywhere starting with PARAMETER as a PARAMETER statement.

	3. Added a new -source option, 8=implicit typing of PARAMETERs.
	   Some compilers (DEC) implicitly assign a type to a parameter.
	   With -source=8, a parameter that is type_UNDECL at the time the
	   PARAMETER statement is seen will be given the type and size of
	   the value assigned.  I'm not sure this is completely right,
	   since I think I have heard that some compilers let a parameter
	   take on whatever type is appropriate for its value and the
	   context where it is used, but this should at least avoid a lot
	   of type mismatch warnings.

1998-08-06  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added "-Olimit 1500" to OS_FLAGS for irix in configure.in.

	* Changed test/Makefile.in to use awk instead of bc to compute 2^n
	in checkmakedcls.  A bug in one version of bc yielded makedcls=2
	for all the tests.  Anyway, not everybody has bc, so this should
	be more widely compatible.

1998-08-02  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed test/Makefile.in
	   MAKE = make FTNCHEK=$(FTNCHEK) OKAY=$(OKAY) VARY=$(VARY)
	to
	   MAKE = @MAKE@ FTNCHEK=$(FTNCHEK) OKAY=$(OKAY) VARY=$(VARY)
	with @MAKE@ set to "make" by configure.  This is so that the OS/2
	configure can substitute gmake instead.

	* Minor changes to source to cure "ambiguous else" warnings issued
	by gcc -Wall on HP-UX 10.20 reported by Stefan Deutscher

1998-07-27  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Released Version 2.10.0.  Fixed up the web page, including a
	logo, and a link to the new html docs.

1998-07-25  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Fixed configure so that it warns if rman is not PolyglotMan.
	The earlier version of rman, RosettaMan, cannot process roff
	source and so must be considered incompatible. Fixed make_html.sh
	to create the html directory if it does not exist.  Also fixed
	configure so that it provides full paths for nroff, psroff, and
	rman.

1998-07-23  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed over html documentation from ftnchek.html to an html
	directory containing pages.  Each .SH head becomes its own page
	(except for NAME and SYNOPSIS which are merged into one page).
	Also, the Options section is abbreviated down to just the
	introductory paragraphs, with URLs to all the options tacked on at
	the end.  The options themselves are each put into their own page.
	This has the advantage that instead of a single 170K file (which
	takes several seconds to load even on localhost), the info is
	split into pieces, the largest of which is 30K, and which average
	only 3.3K.  The script to do this is named make_html.sh.  The
	result is quite satisfactory.

	The command "make htmldocs" follows these steps: ftnchek.man by
	soelim+sed -> ftnchek.1 by rman -> ftnchek.html.orig by patch ->
	ftnchek.html by make_html.sh -> html/*.html.

	Note on editing procedure: as always, content changes are done to
	ftnchek.man.  If editing is minor, probably "make htmldocs" will
	work OK.  However, the rman output sometimes changes enough to
	cause the patch to fail.  So the safer procedure is to do "make
	ftnchek.html" first, then recover any failed patches before
	proceeding to "make htmldocs".  If patch fails or issues warnings,
	edit ftnchek.html to be correct, then "make ftnchek.html.patch".

1998-07-18  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added ftnchek.html to the distribution.  This is generated by
	rman from ftnchek.1, then patched.  To generate the patch, I
	edited the output of rman by hand.  The edits mainly involved
	making sections that are formatted using no-fill in nroff into
	pre-formatted html, which rman avoids for some reason.

	* Added wildcard recognition of warnlist options.  This is mainly
	useful for the -usage and -truncation options, which have several
	categories of options with common substrings.
	
1998-07-03  Robert K. Moniot  <moniot@galileo.dsm.fordham.edu>

	* Obtained ftnchek.el from Judah Milgram <milgram@eng.umd.edu>.
	As received (Version: 0.6 6/18/98) there was one bug: the flags
	for ftnchek need to include -nonovice.  Presumably the author uses
	an rc file that always sets this.  Added ftnchek.el to the
	distribution.  Fixed up configure to search for emacs site-lisp
	directory, and Makefile to install ftnchek.el there.

	* Noticed and fixed potential buffer overrun bugs in find_rc() in
	ftnchek.c and in fopen_with_path() in forlex.c: the buffers
	holding path names could overflow if home or include directory
	name is too long.  Space is now malloc'ed to fit and free'd later.
	Also, in get_env_options() in ftnchek.c, the length of
	env_option_name array could become too small as options are added
	later, so code was added to check it.  This length does not vary at
	runtime, so a fixed-size buffer is OK.

1998-06-30  Robert K. Moniot  <moniot@galileo>

	* Added a minimal FAQ to the distribution.

	* Grandfathered the numeric settings of -intrinsic and -usage, so
	that people who have written scripts and rc files won't have to
	change them.

Wed Jun 24 11:33:03 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Completed the support for f90=statement-order.

Fri Jun  5 16:08:59 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* The -f90 flag support is now completed except for statement-order.

	* Added a new file, config.h, generated by configure from
 	config.h.in.  It is included at the start of ftnchek.h and
 	contains, at present, sizes of the int flavors, needed now that
 	the size of the intrinsic flag field has increased to 17 bits so a
 	short is not necessarily big enough.  At present, only symtab.h
 	depends on it, but I have put dependencies to it for all files
 	into the Makefile since it is included by everybody.

	* While implementing f90=mixed-expr checking, I noticed that the
 	"obscure rule" (6.2.2 ) warning is issued incorrectly sometimes
 	when the concatenation does occur in an assignment statement.
  	Turned out to be due to the production fun_or_substr_handle, which
 	messes with in_assignment_stmt.  The klugey fix is to save
 	IN_ASSIGN in all three tokens of the expression so at least one of
 	them should have it set.  Also fixed it so the warning is not
 	issued when the adjustable-size char is a parameter.

Thu Jun  4 15:29:21 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* In the process of doing f90_format_extensions, I added
 	recognition of the format edit descriptors Bw.d, Ow.d, Zw.d which
 	are part of f90.  Also added tolerance of ENw.d[Ee] and ESw.d[Ee],
 	so the -f90 warning for unrecognized forms will not flag valid forms.
	
	* Began adding new -f90 warning list for extensions to f77 that
	did not make it into f90.  This is a subset of the f77 warnings,
	and includes the following flags:

	  accept-type backslash byte cpp d-comment dec-tab double-complex
 	  format-dollarsign format-edit-descr function-noparen intrinsic
 	  long-line name-dollarsign param-noparen pointer quad-constant
 	  statement-order type-size typeless-constant variable-format
 	  vms-io

	Some sticky bits:
	- The statement ordering rules for f90 are similar
 	  to those of f77, but allow data statements to be mixed among
 	  type declarations.
	- Typeless constants of the form [BOZ]'dddd' are OK in f90, but
 	  the forms X'ddd' and 'ddd'[BOZX] are not.
	- The array-bounds flag is not included since f90 allows array
 	  elements and intrinsic function references; however external
 	  functions are still disallowed, but it does not appear simple to
 	  add detection of this error.
	- Intrinsic functions to be flagged are those that did not
 	  make it into f90.  Of the recognized nonstandard intrinsics, the
	  only ones that did get into f90 are the MILSTD intrinsics.
	- The mixed-type expressions are mostly the same in f90 as in f77,
	  except for (1) the adjustable-size-char concatenation rule,
	  which is absent in f90, and (2) the double-complex immiscibility
	  has gone away.

Mon May 25 10:52:33 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added new -f95 warning list for valid f77 syntax that was
	deleted in f95.  These are:
		1. real & d.p. DO variables
		2. PAUSE statement
		3. ASSIGN, assigned GOTO, and assigned format statements
		4. The H edit descriptor
	One more such syntax that ftnchek cannot currently catch is
		5. branching to an ENDIF from outside the IF block
	The new warning list is
		-f95=real-do,pause,assign,h-edit

	* Got the -f77=array-bounds warning working.  Fixed up the
	assignment-statement array warning so that if a scalar is on the
	left side while an array is on the right, it always warns.  This
	is illegal in F90.  If an array is on the left, then a warning is
	given subject to control by -f77=assigment-stmt.  No checking is
	done for detailed match of shape between left and right sides if
	both are arrays.

	* Added a definition of home dir for MSDOS as c:\bin in ftnchek.h,
 	according to advice from Scott M. Blackman
 	<scott.blackman@vanderbilt.edu>.

	* Added a new makefile.djgpp to the distribution.  This is also
 	based on Blackman's advice.

Sun May 24 22:26:00 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Upgraded autoconf to 2.12 and replaced config.guess and
	config.sub by the newer versions.

	* Altered open_include_file() in forlex.c so that when -source=2
 	flag is given (VMS style includes), it first tries to open the
 	given include file without adding an extension, and only if
 	unsuccessful does it try adding the default extension.  This is
 	helpful for VMS users who define logical names for their include
 	files.  Suggested by Lothar.Thiel@dlr.de.

Thu May 21 16:43:39 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed configure from -ieee_with_inexact to
 	-ieee_with_no_inexact in CFLAGS for OSF non-gcc, as per advice
 	from John Faricelli <faricelli@subpac.enet.dec.com>.  The former
 	causes a trap to software anytime floating-point operations are
 	inexact, which we don't care about.  (Actually, this won't matter
 	except when compiling the debug flavor.)

	* Added a check for assignment to whole array.  Since this is
	valid in F90, it has been put under control of a new f77 flag,
	assignment-stmt.

Sun Apr 26 15:42:49 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Looked into bug report from: J F Harper <John.Harper@vuw.ac.nz>
	showing that the following line gives a parse error:
	      DO DOPRINT = 1, 4
	The DO of DOPRINT is being taken as a second DO keyword.  Traced
 	the problem to lack of EK, which turns off initial_flag, in the
 	context definition for DO in keywords.h.  I cannot see why DO
 	should not turn off initial_flag, since it cannot be followed by
 	any other keyword except WHILE, which does not assume IK.  So I
	added EK to DO, and all seems well.

Mon Feb 16 20:45:55 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed the way -nocheck avoids turning off the wrong thing:
	each switch or setting now has a new field called isacheck, which
	can either be NOT_A_CHECK or IS_A_CHECK, and turn_off_checks()
	skips the former.  No longer need to save and restore variables of
	special settings.  Also, restored the turnoff and turnon fields of
	-intrinsic that were nulled out on Nov 9, so that -intrinsic with
	no list and -nointrinsic are accepted.

Wed Feb 11 06:33:26 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added -pointer=dd option to control size of Cray pointers.  This
	feature has not yet been checked.  Also, this stuff should be
	bracketed by #ifdef ALLOW_CRAY_POINTER.

	* Fixed bug where #ifdef OPT_PREFIX_SLASH was used instead of the
	correct OPTION_PREFIX_SLASH.  The bug caused the VMS /help option
	to say "use -option=help" instead of "use /option=help".

Thu Jan 22 10:31:11 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Fixed test/Makefile to make checkintrinsic which tests the new
	-intrinsic options.  Upgraded intrinstest.f to provide some
	checking of these options.

	* Fixed test/Makefile to make checkusage properly with new -usage
 	str settings.  It only tests the same 4 broad categories of none,
 	uninitialized only, unused only, and all.

	* Redefined the -intrinsic settings by eliminating the f77 and
	any-arg options, so now there are no mutually exclusive options.
	The options are:
	  extra [yes]: recognize commonly supported nonstandard intrinsics
	  unix [yes]: recognize some unix intrinsics
	  vms [no]: recognize some vms intrinsics
	  iargc-no-argument [yes]: iargc takes no arguments
	  iargc-one-argument [yes]: iargc takes one argument
	  rand-no-argument [yes]: rand takes no arguments
	  rand-one-argument [yes]: rand takes one argument
	Now "all" has the meaning of turning all of these on, meaning (a)
	all intrinsics are recognized and (b) either no arg or one arg
	forms of rand and iargc are accepted.

	The only awkwardness is that the no-arg and one-arg options should
 	not both be turned off.  This should not matter when the user is
 	setting them, but will happen when -intrinsic=none is given.  Even
 	then it won't matter except if the extra or unix option is then
 	turned back on.  In this case, the result is to revert to the
 	compile-time default (which is normally to accept both).

Wed Jan 21 20:31:04 1998  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Enclosed #include <math.h> in #ifdef DEBUG_FORLEX.  It is needed
	only for pow() when debugging, and one user reported the compiler
	not finding this include-file (although it is part of ANSI C).

Sun Nov 16 21:37:31 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Altered ftnchek main() to call do_preps() at the right place to
	do anything that must be done prior to processing first file.  At
	present, this only calls set_intrinsic_options() to fill in the
	correct value of num_args for RAND, IRAND, and IARGC.  Not fully
	tested at this time.  The code makes no use of the variables
	intrinsic_*_any_arguments since no_arg and one_arg are exclusive
	of it.  But it seems any_arg is needed as a handle for the
	intrinsic option corresponding to it.

Sun Nov  9 21:03:35 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Created a new routine set_warn_option_value that sets a warn
	option flag to a given value.  This routine has code to see if the
	flag variable in question is special, and if so it does any
	special processing.  At the moment, this just enforces mutual
	exclusion of the iargc and rand argument options.  The semantics
	of preceding these options with "no-" is murky: what does it mean
	if you say "-intrinsic=no-rand-any-arg"?  Also, the meanings of
	"all" and "none" remain unclear.

  	I have replaced the turnon and turnoff values for the "intrinsic"
 	entry in the strsetting array by NULL so they will not be affected
 	by -nocheck.  This may cause -help to print the wrong thing.  Must
	look into this.

	I also changed the phrase "warning option" in error diagnostics so
	it uses the title of the warnlist, e.g. "Fortran 77 Warning".
	This allows the diagnostics for -intrinsic not to use the word
	warning.

	It is still not clear that I shouldn't give -intrinsic and its kin-
	to-be their own handler instead of set_warn_option().

Sun Oct 12 20:49:45 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Began work on changing the -intrinsic option from a 3-digit
 	numerical setting to a list of options.  So far, I have only
 	defined the option variables and set up the "warnlist" definition
 	for it.  Note that this has changed the meaning of warnlist to
 	include things that are not warnings.  The help feature has had
 	its wording changed to reflect this change.  At this point, here
	is the list of options:
	    Intrinsic Function Options:
	      common [yes]: commonly supported nonstandard intrinsics
	      f77-only [no]: commonly supported nonstandard intrinsics
	      iargc-no-argument [no]: iargc takes no arguments
	      iargc-one-argument [no]: iargc takes one argument
	      iargc-any-arguments [yes]: iargc takes either number of arguments
	      rand-no-argument [no]: rand takes no arguments
	      rand-one-argument [no]: rand takes one argument
	      rand-any-arguments [yes]: rand takes either number of arguments
	      unix [yes]: some unix intrinsics
	      vms [no]: some vms intrinsics

	I still need to think thru how to handle the fact that some of
 	these options are mutually exclusive.  Namely: (1) any of the
 	rand-x-arg options should turn off the other two. (2) any of the
 	iargc-x-arg options should turn off the other two.  (3) f77-only
 	should turn off common, unix, and vms, and any of those three
 	should turn off f77-only.  However, common, unix, and vms can
 	coexist. I also need to define the meanings of "all" and "none"
 	for this option.

Thu Sep 18 20:30:51 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added recognition of "-no-option" equivalent to "-nooption" for
	sake of similarity to "no-" prefix used in option lists.

Sun Aug 24 21:24:00 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Finished the changeover of -usage to the new set of variables.
	Still need to run some tests to make sure it works right.

Sun Aug 10 20:49:25 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* I have begun the changeover of -usage from a numeric 3-digit
 	setting to a string setting like -f77.  So far, only the
 	definitions of the new variables in ftnchek.h and the commandline
 	defns in ftnchek.c are done.  Still need to change over all code
 	that uses the old usage-check variables to use the new ones.

	* Changed error message "noncomputational primary in expression"
	to "numeric or character quantity expected" in exprtype.c.

Sun Jul 27 17:38:18 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added new option -f77=automatic-array which checks for a local
 	array having variable dimension.  This required finally separating
 	Token.TOK_flags from Token.subclass, since the flags field carries
 	the needed information in PARAMETER_EXPR, which would be clobbered
 	by TOK_elts which shares Token.subclass.  For cleanness, I also
 	separated Token.TOK_type from Token.class, though this is not
 	necessary at the present time.  This separation may break some
	defs of chunk sizes for small machines like Mac MPW, since it
	increases sizeof(Token) by 2*sizeof(long).

	This revision is now ready for release as version 2.9.5.

Thu Jul 17 09:39:47 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changes for OS/2 as per Stefan Deutscher Oct 1997:
	  -- ftnchek.c: precede unlink(dclfile) by fclose(dcl_fd)
	  -- test/Compare.sh.in: configurable MKDIR and add -f to RM.
	     Stefan had this as a separate file Compare.in, but it is
	     compatible so I have made it the new Compare.sh.in.  I hope
	     that is a legit OS/2 filename.
	  -- 

	* Made minor changes for compatibility with Mac MPW, as suggested
	by Michel Evrard (evrard@phys-003.rma.ac.be):
	  -- makefile.mpw: change COptions to
		COptions = -mc68020 -d HASHSZ=3276 -d LOCSYMTABSZ=1820 \
			-d GLOBSYMTABSZ=2048 -d MAC_MPW -m -s {default}
	  -- forlex.c: add
		#ifdef MAC_MPW
		#include <compat.h>
		#endif
	  -- ftnchek.c: change (void) exit(1) to plain exit(1).
	  -- symtab.c: change rehash(long unsigned int hnum) to
		rehash(unsigned long  hnum)

Sun Apr 27 20:03:52 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed the warning "Variable cannot be in two different common
 	blocks" to "Variable cannot be in common twice" since the code
 	doesn't look at whether it might be the same block.  Suppressed
 	this warning if the variable is equivalenced to anything, to work
 	around bug whereby a pair of variables legally equivalenced to
 	different parts of an array and listed in the same common block
 	generated this warning.  E.g.
	  DIMENSION X(2)
	  EQUIVALENCE (A,X(1)), (B,X(2))
	  COMMON A,B

	* Added a new test program, substr.f, to test suite.  This tickles
	a bug in gcc 2.7 under DEC Unix 4.0 for Alpha reported by
	R.Hooft@EuroMail.com (Rob Hooft).

Tue Jan  7 21:20:34 1997  Robert Moniot  <moniot@galileo.dsm.fordham.edu>
	The following change was retracted (saved as ftnchek.c.try-usage-fix)
	owing to klugey nature of fix.  It will be better to revise the
	way the -usage and -intrinsic options are defined, making them
	use keyword suboptions the -f77 et al now do.

	* Fixed a bug reported by "Wayne B'Rells" <wf.brells@pti-us.com>
 	whereby usage=nnn in the rc file was not honored.  Due to having
 	secondary flags var_usage_check com_usage_check ext_usage_check
 	updated in the if-block where commandline flags are processed.
  	This means update is skipped if there are no commandline flags.
  	Moved the update code (and some similar other actions) into
 	set_option.  Required moving calls of get_env_options and
 	get_rc_options to follow initialization of intrinsic table so
 	intrinsic=nnn is handled correctly.

Sun Dec  1 13:03:23 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added a lookaround for the bc program to configure script, used
 	in checking -makedcls.  Changed the makedcls check to look first
 	to see if it exists, and skip the check if not found.  This
 	workaround motivated by lack of bc in RedHat Linux 4.0.

Thu Nov  7 21:08:20 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Fixed bug reported by Stefan Deutscher: the message "possibly it
	is an array which was not declared" was issued for undefined
	functions even if they were declared external.  Bug was traced to
	code in symtab.c which copied the declared_external flag from
	local to global symtab for class_VAR instead of class_SUBROUTINE
	entries.  (The former can never have the declared_external flag
	set, since setting it is always accompanied by making the storage
	class be the latter.)

Wed Oct  2 21:39:39 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* In response to feedback from Stefan Deutscher, I made some more
	minor configuration changes:
	   - Removed tcsh.exe from list of command shells since its syntax
	     is incompatible with sh-like shells, and moved bash to last
	     place in the list.
	   - Changed 'awk' to @AWK@ in test/Makefile.in
	   - Changed test/Compare.sh to be made by configure from
	     Compare.sh.in so executables are substituted as in Makefile.

Sun Sep 22 17:31:05 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Applied all of Christian Bartel's (cbartels@jupiter4.mmrc.ncsu.edu)
 	changes to configure_os2.cmd (these are his words):

	  - Added 'tcsh.exe' to the list of command-shells.
	    (This was suggested by Stefan A. Deutscher)

	  - List of command-shells splitted into two lines.  (Cosmetic
 	    change but will allow easier addition of new shells)

	  - Adapted 'elseif' construct before 'bison.exe' to REXX syntax.
  	    (The same is done in patch 3 to Ftnchek. Here done only in a
 	    different way).

	  - Corrected SED command to replace @EXE@ and @CMD@.
	    (formerly inserted the string "'.exe'" and "'.cmd'" instead of
	    ".exe" and ".cmd"; note the superfluous dashes)

	  - Added: Remove '/' or '\' at the end of prefix directory.
  	      (this is new functionality to protect the user)

	  - Corrected error in the command for static linking.
	      (the link flags for omf style libraries weren't doing static
	     linking when requested)

	  - Changed name of output file to 'Makefile.os2' (this name is a
	    little more intuitive but it overwrites the 'Makefile.os2'
 	    of the distribution this has therefore been removed from
 	    'Makefile.in')

	  - I have refused to remove the flag '-m486' in CFLAGS because it
 	    does not hurt Intel 386 machines a lot. It only increases the
 	    size slightly and optimizes for the RISC kernel of the I486
 	    (it does not use the special instructions for the I486
 	    according to the GCC documentation). This was requested by
 	    Stefan A. Deutscher.

  	  - When a unix-like shell is used under OS/2 the variable
 	    PREFIXDIR in the output Makefile contains superfluous
 	    backslashes.

	  - Removes an error in the documentation printed in the makefile

	* Applied one of Christian Bartel's changes to Makefile.in for
 	better OS/2 support: add extensions to ftnchek and dcl2inc in
 	uninstall target.  I did not follow his suggestion to remove EXT
 	from dcl2inc target (which is also made by configure_os2), since
 	there are still possibly some systems where an extension would be
 	desirable.  Instead, I moved the creation of dcl2inc into
 	configure, to parallel the OS/2 procedure.  I also did not remove
 	makefile.os2 from list of BUILDFILES (it is now made by
 	configure_os2) since it is still useful for those OS/2 users who
 	choose not to run configure_os2.

	* Followed suggestions of Larry Schwimmer
 	(schwim@cyclone.stanford.edu) for dcl2inc: changed invocation of
 	gawk from 'gawk ... $*' to 'exec gawk ... "$@"' so that one
 	process is freed up and the parameters are preserved as given.

Fri Sep 13 14:17:25 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Removed -D_BSD from OS_FLAGS in configure.in, except for AIX c89
 	compiler, since I don't think it is recognized by any other OS and
 	the gcc docs don't mention it.  It was put in originally by a
 	contributor (I think Beebe when he added OS-specific targets to
 	the Makefile).  He probably  assumed it was an internally used
 	macro.

	* Added a new variable, misc_warn, that is used to turn off
	warnings not covered by the other flags, when -nocheck is given.
	Unfortunately this variable does not have a command-line option to
	control it separately, and the warnings it covers are indeed
	miscellaneous.  They are:
	  "invalid length specification"
	  "type mismatch between DO index and bounds"
	  "nonzero integer expected"
	  "Module contains no executable statements"
	  "no such common block in module"
	  type "is invalid for intrinsic function:"
	  "Unknown intrinsic function:"
	  function "not set when RETURN encountered"
	  "Constant not evaluated: value of 0 assumed"
	  "entry point redefined as module"
	  actual-arg intrinsic function "not declared INTRINSIC"
	  "Unrecognized [I/O] keyword"

Sun Sep  8 17:19:48 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Fixed bug reported by Bernd.Lehle@csv.ICA.Uni-Stuttgart.DE
 	(Bernd Lehle) causing "ftnchek -makedcl" to crash on a program
 	containing a CHARACTER PARAMETER if the type declaration uses a
 	size expression other than a simple constant.  The bug was in
	get_size_text where I seem to have had a misimpression that
	character parameters could not have such type declarations.
	
Thu Aug 29 22:15:45 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Inserted missing semicolon in fortran.y at the end of production
 	nonempty_fun_arg_list.  No effect on parser.

	* Added syntax error message for parameter whose type is declared
	after the parameter definition.

Sun Aug 25 12:49:01 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added MVBITS to extra intrinsic functions, so that now all the
	Milstd 1753 bit-twiddling intrinsics are supported.

Thu Aug 22 20:27:22 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Tried some timing tests vs. different optimization levels.
	Found about a 10% speedup from -O1 to -O3, with -02 intermediate.
	Found no significant difference between -m486 and non.

	* Fixed a bug which caused EXTERNAL BAR ... X = FOO(BAR) to
	generate error message "BAR not invoked".  This was due to the
	pure-function argument handler not setting the set_flag for
	actual arguments that are externals.  (Message did not appear if
	-nopure used.)

Sun Aug 11 14:55:59 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed handling of "statement out of order" error: (1) the
	statement sequence number is rolled back when error is
	encountered, so that e.g. a DATA statement preceding a lot of type
	declarations won't cause them all to give the error message, only
	the first one will.  (2) the error report is now placed under
	control of -f77=statement-order, and is a nonstandard warning
	instead of a syntax error.

	* Fixed compatibility snag in configure.in: "test -x" changed to
	"test -f" since Ultrix test does not recognize -x flag.

Sun Jun  9 14:18:52 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Looked into the bug with -version (see Jun 4) and found the root
	of the problem: the OPTION_PREFIX_SLASH version (msdos and vms)
	has a loop instead of an if statement inside the loop over command
	line arguments to handle unseparated options.  In the processing
	of the version flag, I used continue where I should have used goto
	next_arg.  For the unix version, next_arg is a label on a continue
	statement, so it worked OK there, but on the other version it got
	stuck in the inner loop.  Froze patch 3 at this point.

Tue Jun  4 19:58:22 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* While testing the msdos version of 2.9.2, I found a problem with
	the -version option as compiled by djgpp, causing ftnchek to hang
	when this option is given.  This behavior does not appear in the
	Linux or AIX versions so it may be a bug in the djgpp compiler or
	optimizer.  But it is easy to fix and the result is somewhat
	clearer too (combining the handling of print_version with the
	handling of help_screen instead of using a continue).  The problem
	also appears in the VMS version.  (The msdos executable made today
	has the bug fixed but still says it is patch 2.)

Sun Jun  2 22:06:09 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added checks for two nonstandard array dimensioning usages under
	-f77: array-bounds warns if bounds expression contains an array or
	function reference, and automatic_array warns if a non-dummy array
	has variable bounds.  These pass check and smoke test but fail to
	flag items of form  DIMENSION A(1:n) where n is in violation.

	Note added later: this attempt ran into trouble and was
	withdrawn.  Work is saved as patch in arraydecl-check.patch.
	
Sun May 26 14:38:39 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

        * Added quad intrinsic functions.  I used the AIX XL Fortran/6000
        User's manual as a reference.  These required a small amount of
        additional code and two new intrins_flags.  The new flags are
        I_QARG to signify that arguments must be quad precision, and
        I_QUAD to signify that result is quad precision.  Quad precision
        real is implemented as REAL with size equal to 4 times default
        real size.  There are also quad complex quantities which are
        equivalent to two quad reals.  I_QARG and I_QUAD apply to either
        real or complex flavors of quad precision.

	Froze patch 2 at this point.

Fri May 17 15:40:25 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Added support for quad constants (of form 1.23Q4).  Implies new
	 flag -f77=quad-constant to control warnings.  Adding Q intrinsics
	 will be trickier since machinery does not currently support
	 numeric intrinsics with non-default size.

Sun May  5 17:09:26 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Changed definition of SYSTEM from type_SUBROUTINE to
	type_INTEGER as it should be.

        On May 15, placed version 2.9.1 into ftp@dsm.fordham.edu and
        notified netlib and comp.lang.fortran.

Thu May  2 18:03:11 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Removed the sed script that creates makefile.generic from
	Makefile.in, and put it into a shell script named
	configure.generic.  The idea is that configure.generic and
	configure_os2.cmd take the place of configure for these special
	cases.

	* Split the -trunc=demotion option into two separate ones:
	size-demotion for same-type demotions, and type-demotion for
	demotions across types.  Note that DOUBLE PRECISION is considered
	a different type from REAL, so size-demotion covers the assignment
	REAL = REAL*8 whereas type-demotion covers REAL = DOUBLE.  Some
	people may object to this, but this is the simplest
	implementation.

	* While doing the above, I found & fixed a bug introduced in 2.9.0
	(at patch level 5 of the alpha development) whereby giving
	-trunc=no-demotion turned off promotion warnings in binary
	expressions.

Sun Apr 28 19:44:46 1996  Robert Moniot  <moniot@galileo.dsm.fordham.edu>

	* Modified configure.in and Makefile.in to ease the port to OS/2.
	Christian Bartels has provided a REXX script to mimic configure in
	an OS/2 environment and create a suitable Makefile from
	Makefile.in.  To keep it clean, I have made the following changes:
	  -- configure.in now uses AC_PATH_PROG to find all the "standard
	     Unix" programs and substitute them in Makefile.
	  -- Makefile now has EXE and CMD extensions defined.  These are
	     empty in Unix version but can be made ".exe" and ".cmd" in
	     OS/2.  (Side effect: source-directory script dcl2inc loses
	     its extension .sh, so it now has no extension, like installed
	     version of script.)
